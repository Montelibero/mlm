// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mlm "github.com/Montelibero/mlm"
	mock "github.com/stretchr/testify/mock"
)

// StellarAgregator is an autogenerated mock type for the StellarAgregator type
type StellarAgregator struct {
	mock.Mock
}

type StellarAgregator_Expecter struct {
	mock *mock.Mock
}

func (_m *StellarAgregator) EXPECT() *StellarAgregator_Expecter {
	return &StellarAgregator_Expecter{mock: &_m.Mock}
}

// Balance provides a mock function with given fields: ctx, accountID, asset, issuer
func (_m *StellarAgregator) Balance(ctx context.Context, accountID string, asset string, issuer string) (string, error) {
	ret := _m.Called(ctx, accountID, asset, issuer)

	if len(ret) == 0 {
		panic("no return value specified for Balance")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (string, error)); ok {
		return rf(ctx, accountID, asset, issuer)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = rf(ctx, accountID, asset, issuer)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, accountID, asset, issuer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StellarAgregator_Balance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Balance'
type StellarAgregator_Balance_Call struct {
	*mock.Call
}

// Balance is a helper method to define mock.On call
//   - ctx context.Context
//   - accountID string
//   - asset string
//   - issuer string
func (_e *StellarAgregator_Expecter) Balance(ctx interface{}, accountID interface{}, asset interface{}, issuer interface{}) *StellarAgregator_Balance_Call {
	return &StellarAgregator_Balance_Call{Call: _e.mock.On("Balance", ctx, accountID, asset, issuer)}
}

func (_c *StellarAgregator_Balance_Call) Run(run func(ctx context.Context, accountID string, asset string, issuer string)) *StellarAgregator_Balance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *StellarAgregator_Balance_Call) Return(_a0 string, _a1 error) *StellarAgregator_Balance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StellarAgregator_Balance_Call) RunAndReturn(run func(context.Context, string, string, string) (string, error)) *StellarAgregator_Balance_Call {
	_c.Call.Return(run)
	return _c
}

// Recommenders provides a mock function with given fields: ctx
func (_m *StellarAgregator) Recommenders(ctx context.Context) (*mlm.RecommendersFetchResult, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Recommenders")
	}

	var r0 *mlm.RecommendersFetchResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*mlm.RecommendersFetchResult, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *mlm.RecommendersFetchResult); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mlm.RecommendersFetchResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StellarAgregator_Recommenders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Recommenders'
type StellarAgregator_Recommenders_Call struct {
	*mock.Call
}

// Recommenders is a helper method to define mock.On call
//   - ctx context.Context
func (_e *StellarAgregator_Expecter) Recommenders(ctx interface{}) *StellarAgregator_Recommenders_Call {
	return &StellarAgregator_Recommenders_Call{Call: _e.mock.On("Recommenders", ctx)}
}

func (_c *StellarAgregator_Recommenders_Call) Run(run func(ctx context.Context)) *StellarAgregator_Recommenders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *StellarAgregator_Recommenders_Call) Return(_a0 *mlm.RecommendersFetchResult, _a1 error) *StellarAgregator_Recommenders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StellarAgregator_Recommenders_Call) RunAndReturn(run func(context.Context) (*mlm.RecommendersFetchResult, error)) *StellarAgregator_Recommenders_Call {
	_c.Call.Return(run)
	return _c
}

// NewStellarAgregator creates a new instance of StellarAgregator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStellarAgregator(t interface {
	mock.TestingT
	Cleanup(func())
}) *StellarAgregator {
	mock := &StellarAgregator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
