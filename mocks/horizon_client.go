// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	horizon "github.com/stellar/go/protocols/horizon"
	effects "github.com/stellar/go/protocols/horizon/effects"

	horizonclient "github.com/stellar/go/clients/horizonclient"

	mock "github.com/stretchr/testify/mock"

	operations "github.com/stellar/go/protocols/horizon/operations"

	txnbuild "github.com/stellar/go/txnbuild"
)

// HorizonClient is an autogenerated mock type for the HorizonClient type
type HorizonClient struct {
	mock.Mock
}

type HorizonClient_Expecter struct {
	mock *mock.Mock
}

func (_m *HorizonClient) EXPECT() *HorizonClient_Expecter {
	return &HorizonClient_Expecter{mock: &_m.Mock}
}

// AccountData provides a mock function with given fields: request
func (_m *HorizonClient) AccountData(request horizonclient.AccountRequest) (horizon.AccountData, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for AccountData")
	}

	var r0 horizon.AccountData
	var r1 error
	if rf, ok := ret.Get(0).(func(horizonclient.AccountRequest) (horizon.AccountData, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(horizonclient.AccountRequest) horizon.AccountData); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(horizon.AccountData)
	}

	if rf, ok := ret.Get(1).(func(horizonclient.AccountRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_AccountData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AccountData'
type HorizonClient_AccountData_Call struct {
	*mock.Call
}

// AccountData is a helper method to define mock.On call
//   - request horizonclient.AccountRequest
func (_e *HorizonClient_Expecter) AccountData(request interface{}) *HorizonClient_AccountData_Call {
	return &HorizonClient_AccountData_Call{Call: _e.mock.On("AccountData", request)}
}

func (_c *HorizonClient_AccountData_Call) Run(run func(request horizonclient.AccountRequest)) *HorizonClient_AccountData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(horizonclient.AccountRequest))
	})
	return _c
}

func (_c *HorizonClient_AccountData_Call) Return(_a0 horizon.AccountData, _a1 error) *HorizonClient_AccountData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_AccountData_Call) RunAndReturn(run func(horizonclient.AccountRequest) (horizon.AccountData, error)) *HorizonClient_AccountData_Call {
	_c.Call.Return(run)
	return _c
}

// AccountDetail provides a mock function with given fields: request
func (_m *HorizonClient) AccountDetail(request horizonclient.AccountRequest) (horizon.Account, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for AccountDetail")
	}

	var r0 horizon.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(horizonclient.AccountRequest) (horizon.Account, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(horizonclient.AccountRequest) horizon.Account); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(horizon.Account)
	}

	if rf, ok := ret.Get(1).(func(horizonclient.AccountRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_AccountDetail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AccountDetail'
type HorizonClient_AccountDetail_Call struct {
	*mock.Call
}

// AccountDetail is a helper method to define mock.On call
//   - request horizonclient.AccountRequest
func (_e *HorizonClient_Expecter) AccountDetail(request interface{}) *HorizonClient_AccountDetail_Call {
	return &HorizonClient_AccountDetail_Call{Call: _e.mock.On("AccountDetail", request)}
}

func (_c *HorizonClient_AccountDetail_Call) Run(run func(request horizonclient.AccountRequest)) *HorizonClient_AccountDetail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(horizonclient.AccountRequest))
	})
	return _c
}

func (_c *HorizonClient_AccountDetail_Call) Return(_a0 horizon.Account, _a1 error) *HorizonClient_AccountDetail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_AccountDetail_Call) RunAndReturn(run func(horizonclient.AccountRequest) (horizon.Account, error)) *HorizonClient_AccountDetail_Call {
	_c.Call.Return(run)
	return _c
}

// Accounts provides a mock function with given fields: request
func (_m *HorizonClient) Accounts(request horizonclient.AccountsRequest) (horizon.AccountsPage, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Accounts")
	}

	var r0 horizon.AccountsPage
	var r1 error
	if rf, ok := ret.Get(0).(func(horizonclient.AccountsRequest) (horizon.AccountsPage, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(horizonclient.AccountsRequest) horizon.AccountsPage); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(horizon.AccountsPage)
	}

	if rf, ok := ret.Get(1).(func(horizonclient.AccountsRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_Accounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Accounts'
type HorizonClient_Accounts_Call struct {
	*mock.Call
}

// Accounts is a helper method to define mock.On call
//   - request horizonclient.AccountsRequest
func (_e *HorizonClient_Expecter) Accounts(request interface{}) *HorizonClient_Accounts_Call {
	return &HorizonClient_Accounts_Call{Call: _e.mock.On("Accounts", request)}
}

func (_c *HorizonClient_Accounts_Call) Run(run func(request horizonclient.AccountsRequest)) *HorizonClient_Accounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(horizonclient.AccountsRequest))
	})
	return _c
}

func (_c *HorizonClient_Accounts_Call) Return(_a0 horizon.AccountsPage, _a1 error) *HorizonClient_Accounts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_Accounts_Call) RunAndReturn(run func(horizonclient.AccountsRequest) (horizon.AccountsPage, error)) *HorizonClient_Accounts_Call {
	_c.Call.Return(run)
	return _c
}

// Assets provides a mock function with given fields: request
func (_m *HorizonClient) Assets(request horizonclient.AssetRequest) (horizon.AssetsPage, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Assets")
	}

	var r0 horizon.AssetsPage
	var r1 error
	if rf, ok := ret.Get(0).(func(horizonclient.AssetRequest) (horizon.AssetsPage, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(horizonclient.AssetRequest) horizon.AssetsPage); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(horizon.AssetsPage)
	}

	if rf, ok := ret.Get(1).(func(horizonclient.AssetRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_Assets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Assets'
type HorizonClient_Assets_Call struct {
	*mock.Call
}

// Assets is a helper method to define mock.On call
//   - request horizonclient.AssetRequest
func (_e *HorizonClient_Expecter) Assets(request interface{}) *HorizonClient_Assets_Call {
	return &HorizonClient_Assets_Call{Call: _e.mock.On("Assets", request)}
}

func (_c *HorizonClient_Assets_Call) Run(run func(request horizonclient.AssetRequest)) *HorizonClient_Assets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(horizonclient.AssetRequest))
	})
	return _c
}

func (_c *HorizonClient_Assets_Call) Return(_a0 horizon.AssetsPage, _a1 error) *HorizonClient_Assets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_Assets_Call) RunAndReturn(run func(horizonclient.AssetRequest) (horizon.AssetsPage, error)) *HorizonClient_Assets_Call {
	_c.Call.Return(run)
	return _c
}

// AsyncSubmitFeeBumpTransaction provides a mock function with given fields: transaction
func (_m *HorizonClient) AsyncSubmitFeeBumpTransaction(transaction *txnbuild.FeeBumpTransaction) (horizon.AsyncTransactionSubmissionResponse, error) {
	ret := _m.Called(transaction)

	if len(ret) == 0 {
		panic("no return value specified for AsyncSubmitFeeBumpTransaction")
	}

	var r0 horizon.AsyncTransactionSubmissionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*txnbuild.FeeBumpTransaction) (horizon.AsyncTransactionSubmissionResponse, error)); ok {
		return rf(transaction)
	}
	if rf, ok := ret.Get(0).(func(*txnbuild.FeeBumpTransaction) horizon.AsyncTransactionSubmissionResponse); ok {
		r0 = rf(transaction)
	} else {
		r0 = ret.Get(0).(horizon.AsyncTransactionSubmissionResponse)
	}

	if rf, ok := ret.Get(1).(func(*txnbuild.FeeBumpTransaction) error); ok {
		r1 = rf(transaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_AsyncSubmitFeeBumpTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AsyncSubmitFeeBumpTransaction'
type HorizonClient_AsyncSubmitFeeBumpTransaction_Call struct {
	*mock.Call
}

// AsyncSubmitFeeBumpTransaction is a helper method to define mock.On call
//   - transaction *txnbuild.FeeBumpTransaction
func (_e *HorizonClient_Expecter) AsyncSubmitFeeBumpTransaction(transaction interface{}) *HorizonClient_AsyncSubmitFeeBumpTransaction_Call {
	return &HorizonClient_AsyncSubmitFeeBumpTransaction_Call{Call: _e.mock.On("AsyncSubmitFeeBumpTransaction", transaction)}
}

func (_c *HorizonClient_AsyncSubmitFeeBumpTransaction_Call) Run(run func(transaction *txnbuild.FeeBumpTransaction)) *HorizonClient_AsyncSubmitFeeBumpTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*txnbuild.FeeBumpTransaction))
	})
	return _c
}

func (_c *HorizonClient_AsyncSubmitFeeBumpTransaction_Call) Return(_a0 horizon.AsyncTransactionSubmissionResponse, _a1 error) *HorizonClient_AsyncSubmitFeeBumpTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_AsyncSubmitFeeBumpTransaction_Call) RunAndReturn(run func(*txnbuild.FeeBumpTransaction) (horizon.AsyncTransactionSubmissionResponse, error)) *HorizonClient_AsyncSubmitFeeBumpTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// AsyncSubmitFeeBumpTransactionWithOptions provides a mock function with given fields: transaction, opts
func (_m *HorizonClient) AsyncSubmitFeeBumpTransactionWithOptions(transaction *txnbuild.FeeBumpTransaction, opts horizonclient.SubmitTxOpts) (horizon.AsyncTransactionSubmissionResponse, error) {
	ret := _m.Called(transaction, opts)

	if len(ret) == 0 {
		panic("no return value specified for AsyncSubmitFeeBumpTransactionWithOptions")
	}

	var r0 horizon.AsyncTransactionSubmissionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*txnbuild.FeeBumpTransaction, horizonclient.SubmitTxOpts) (horizon.AsyncTransactionSubmissionResponse, error)); ok {
		return rf(transaction, opts)
	}
	if rf, ok := ret.Get(0).(func(*txnbuild.FeeBumpTransaction, horizonclient.SubmitTxOpts) horizon.AsyncTransactionSubmissionResponse); ok {
		r0 = rf(transaction, opts)
	} else {
		r0 = ret.Get(0).(horizon.AsyncTransactionSubmissionResponse)
	}

	if rf, ok := ret.Get(1).(func(*txnbuild.FeeBumpTransaction, horizonclient.SubmitTxOpts) error); ok {
		r1 = rf(transaction, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_AsyncSubmitFeeBumpTransactionWithOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AsyncSubmitFeeBumpTransactionWithOptions'
type HorizonClient_AsyncSubmitFeeBumpTransactionWithOptions_Call struct {
	*mock.Call
}

// AsyncSubmitFeeBumpTransactionWithOptions is a helper method to define mock.On call
//   - transaction *txnbuild.FeeBumpTransaction
//   - opts horizonclient.SubmitTxOpts
func (_e *HorizonClient_Expecter) AsyncSubmitFeeBumpTransactionWithOptions(transaction interface{}, opts interface{}) *HorizonClient_AsyncSubmitFeeBumpTransactionWithOptions_Call {
	return &HorizonClient_AsyncSubmitFeeBumpTransactionWithOptions_Call{Call: _e.mock.On("AsyncSubmitFeeBumpTransactionWithOptions", transaction, opts)}
}

func (_c *HorizonClient_AsyncSubmitFeeBumpTransactionWithOptions_Call) Run(run func(transaction *txnbuild.FeeBumpTransaction, opts horizonclient.SubmitTxOpts)) *HorizonClient_AsyncSubmitFeeBumpTransactionWithOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*txnbuild.FeeBumpTransaction), args[1].(horizonclient.SubmitTxOpts))
	})
	return _c
}

func (_c *HorizonClient_AsyncSubmitFeeBumpTransactionWithOptions_Call) Return(_a0 horizon.AsyncTransactionSubmissionResponse, _a1 error) *HorizonClient_AsyncSubmitFeeBumpTransactionWithOptions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_AsyncSubmitFeeBumpTransactionWithOptions_Call) RunAndReturn(run func(*txnbuild.FeeBumpTransaction, horizonclient.SubmitTxOpts) (horizon.AsyncTransactionSubmissionResponse, error)) *HorizonClient_AsyncSubmitFeeBumpTransactionWithOptions_Call {
	_c.Call.Return(run)
	return _c
}

// AsyncSubmitTransaction provides a mock function with given fields: transaction
func (_m *HorizonClient) AsyncSubmitTransaction(transaction *txnbuild.Transaction) (horizon.AsyncTransactionSubmissionResponse, error) {
	ret := _m.Called(transaction)

	if len(ret) == 0 {
		panic("no return value specified for AsyncSubmitTransaction")
	}

	var r0 horizon.AsyncTransactionSubmissionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*txnbuild.Transaction) (horizon.AsyncTransactionSubmissionResponse, error)); ok {
		return rf(transaction)
	}
	if rf, ok := ret.Get(0).(func(*txnbuild.Transaction) horizon.AsyncTransactionSubmissionResponse); ok {
		r0 = rf(transaction)
	} else {
		r0 = ret.Get(0).(horizon.AsyncTransactionSubmissionResponse)
	}

	if rf, ok := ret.Get(1).(func(*txnbuild.Transaction) error); ok {
		r1 = rf(transaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_AsyncSubmitTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AsyncSubmitTransaction'
type HorizonClient_AsyncSubmitTransaction_Call struct {
	*mock.Call
}

// AsyncSubmitTransaction is a helper method to define mock.On call
//   - transaction *txnbuild.Transaction
func (_e *HorizonClient_Expecter) AsyncSubmitTransaction(transaction interface{}) *HorizonClient_AsyncSubmitTransaction_Call {
	return &HorizonClient_AsyncSubmitTransaction_Call{Call: _e.mock.On("AsyncSubmitTransaction", transaction)}
}

func (_c *HorizonClient_AsyncSubmitTransaction_Call) Run(run func(transaction *txnbuild.Transaction)) *HorizonClient_AsyncSubmitTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*txnbuild.Transaction))
	})
	return _c
}

func (_c *HorizonClient_AsyncSubmitTransaction_Call) Return(_a0 horizon.AsyncTransactionSubmissionResponse, _a1 error) *HorizonClient_AsyncSubmitTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_AsyncSubmitTransaction_Call) RunAndReturn(run func(*txnbuild.Transaction) (horizon.AsyncTransactionSubmissionResponse, error)) *HorizonClient_AsyncSubmitTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// AsyncSubmitTransactionWithOptions provides a mock function with given fields: transaction, opts
func (_m *HorizonClient) AsyncSubmitTransactionWithOptions(transaction *txnbuild.Transaction, opts horizonclient.SubmitTxOpts) (horizon.AsyncTransactionSubmissionResponse, error) {
	ret := _m.Called(transaction, opts)

	if len(ret) == 0 {
		panic("no return value specified for AsyncSubmitTransactionWithOptions")
	}

	var r0 horizon.AsyncTransactionSubmissionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*txnbuild.Transaction, horizonclient.SubmitTxOpts) (horizon.AsyncTransactionSubmissionResponse, error)); ok {
		return rf(transaction, opts)
	}
	if rf, ok := ret.Get(0).(func(*txnbuild.Transaction, horizonclient.SubmitTxOpts) horizon.AsyncTransactionSubmissionResponse); ok {
		r0 = rf(transaction, opts)
	} else {
		r0 = ret.Get(0).(horizon.AsyncTransactionSubmissionResponse)
	}

	if rf, ok := ret.Get(1).(func(*txnbuild.Transaction, horizonclient.SubmitTxOpts) error); ok {
		r1 = rf(transaction, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_AsyncSubmitTransactionWithOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AsyncSubmitTransactionWithOptions'
type HorizonClient_AsyncSubmitTransactionWithOptions_Call struct {
	*mock.Call
}

// AsyncSubmitTransactionWithOptions is a helper method to define mock.On call
//   - transaction *txnbuild.Transaction
//   - opts horizonclient.SubmitTxOpts
func (_e *HorizonClient_Expecter) AsyncSubmitTransactionWithOptions(transaction interface{}, opts interface{}) *HorizonClient_AsyncSubmitTransactionWithOptions_Call {
	return &HorizonClient_AsyncSubmitTransactionWithOptions_Call{Call: _e.mock.On("AsyncSubmitTransactionWithOptions", transaction, opts)}
}

func (_c *HorizonClient_AsyncSubmitTransactionWithOptions_Call) Run(run func(transaction *txnbuild.Transaction, opts horizonclient.SubmitTxOpts)) *HorizonClient_AsyncSubmitTransactionWithOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*txnbuild.Transaction), args[1].(horizonclient.SubmitTxOpts))
	})
	return _c
}

func (_c *HorizonClient_AsyncSubmitTransactionWithOptions_Call) Return(_a0 horizon.AsyncTransactionSubmissionResponse, _a1 error) *HorizonClient_AsyncSubmitTransactionWithOptions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_AsyncSubmitTransactionWithOptions_Call) RunAndReturn(run func(*txnbuild.Transaction, horizonclient.SubmitTxOpts) (horizon.AsyncTransactionSubmissionResponse, error)) *HorizonClient_AsyncSubmitTransactionWithOptions_Call {
	_c.Call.Return(run)
	return _c
}

// AsyncSubmitTransactionXDR provides a mock function with given fields: transactionXdr
func (_m *HorizonClient) AsyncSubmitTransactionXDR(transactionXdr string) (horizon.AsyncTransactionSubmissionResponse, error) {
	ret := _m.Called(transactionXdr)

	if len(ret) == 0 {
		panic("no return value specified for AsyncSubmitTransactionXDR")
	}

	var r0 horizon.AsyncTransactionSubmissionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (horizon.AsyncTransactionSubmissionResponse, error)); ok {
		return rf(transactionXdr)
	}
	if rf, ok := ret.Get(0).(func(string) horizon.AsyncTransactionSubmissionResponse); ok {
		r0 = rf(transactionXdr)
	} else {
		r0 = ret.Get(0).(horizon.AsyncTransactionSubmissionResponse)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(transactionXdr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_AsyncSubmitTransactionXDR_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AsyncSubmitTransactionXDR'
type HorizonClient_AsyncSubmitTransactionXDR_Call struct {
	*mock.Call
}

// AsyncSubmitTransactionXDR is a helper method to define mock.On call
//   - transactionXdr string
func (_e *HorizonClient_Expecter) AsyncSubmitTransactionXDR(transactionXdr interface{}) *HorizonClient_AsyncSubmitTransactionXDR_Call {
	return &HorizonClient_AsyncSubmitTransactionXDR_Call{Call: _e.mock.On("AsyncSubmitTransactionXDR", transactionXdr)}
}

func (_c *HorizonClient_AsyncSubmitTransactionXDR_Call) Run(run func(transactionXdr string)) *HorizonClient_AsyncSubmitTransactionXDR_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *HorizonClient_AsyncSubmitTransactionXDR_Call) Return(_a0 horizon.AsyncTransactionSubmissionResponse, _a1 error) *HorizonClient_AsyncSubmitTransactionXDR_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_AsyncSubmitTransactionXDR_Call) RunAndReturn(run func(string) (horizon.AsyncTransactionSubmissionResponse, error)) *HorizonClient_AsyncSubmitTransactionXDR_Call {
	_c.Call.Return(run)
	return _c
}

// Effects provides a mock function with given fields: request
func (_m *HorizonClient) Effects(request horizonclient.EffectRequest) (effects.EffectsPage, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Effects")
	}

	var r0 effects.EffectsPage
	var r1 error
	if rf, ok := ret.Get(0).(func(horizonclient.EffectRequest) (effects.EffectsPage, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(horizonclient.EffectRequest) effects.EffectsPage); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(effects.EffectsPage)
	}

	if rf, ok := ret.Get(1).(func(horizonclient.EffectRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_Effects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Effects'
type HorizonClient_Effects_Call struct {
	*mock.Call
}

// Effects is a helper method to define mock.On call
//   - request horizonclient.EffectRequest
func (_e *HorizonClient_Expecter) Effects(request interface{}) *HorizonClient_Effects_Call {
	return &HorizonClient_Effects_Call{Call: _e.mock.On("Effects", request)}
}

func (_c *HorizonClient_Effects_Call) Run(run func(request horizonclient.EffectRequest)) *HorizonClient_Effects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(horizonclient.EffectRequest))
	})
	return _c
}

func (_c *HorizonClient_Effects_Call) Return(_a0 effects.EffectsPage, _a1 error) *HorizonClient_Effects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_Effects_Call) RunAndReturn(run func(horizonclient.EffectRequest) (effects.EffectsPage, error)) *HorizonClient_Effects_Call {
	_c.Call.Return(run)
	return _c
}

// FeeStats provides a mock function with given fields:
func (_m *HorizonClient) FeeStats() (horizon.FeeStats, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FeeStats")
	}

	var r0 horizon.FeeStats
	var r1 error
	if rf, ok := ret.Get(0).(func() (horizon.FeeStats, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() horizon.FeeStats); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(horizon.FeeStats)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_FeeStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FeeStats'
type HorizonClient_FeeStats_Call struct {
	*mock.Call
}

// FeeStats is a helper method to define mock.On call
func (_e *HorizonClient_Expecter) FeeStats() *HorizonClient_FeeStats_Call {
	return &HorizonClient_FeeStats_Call{Call: _e.mock.On("FeeStats")}
}

func (_c *HorizonClient_FeeStats_Call) Run(run func()) *HorizonClient_FeeStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *HorizonClient_FeeStats_Call) Return(_a0 horizon.FeeStats, _a1 error) *HorizonClient_FeeStats_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_FeeStats_Call) RunAndReturn(run func() (horizon.FeeStats, error)) *HorizonClient_FeeStats_Call {
	_c.Call.Return(run)
	return _c
}

// Fund provides a mock function with given fields: addr
func (_m *HorizonClient) Fund(addr string) (horizon.Transaction, error) {
	ret := _m.Called(addr)

	if len(ret) == 0 {
		panic("no return value specified for Fund")
	}

	var r0 horizon.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (horizon.Transaction, error)); ok {
		return rf(addr)
	}
	if rf, ok := ret.Get(0).(func(string) horizon.Transaction); ok {
		r0 = rf(addr)
	} else {
		r0 = ret.Get(0).(horizon.Transaction)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(addr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_Fund_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fund'
type HorizonClient_Fund_Call struct {
	*mock.Call
}

// Fund is a helper method to define mock.On call
//   - addr string
func (_e *HorizonClient_Expecter) Fund(addr interface{}) *HorizonClient_Fund_Call {
	return &HorizonClient_Fund_Call{Call: _e.mock.On("Fund", addr)}
}

func (_c *HorizonClient_Fund_Call) Run(run func(addr string)) *HorizonClient_Fund_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *HorizonClient_Fund_Call) Return(_a0 horizon.Transaction, _a1 error) *HorizonClient_Fund_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_Fund_Call) RunAndReturn(run func(string) (horizon.Transaction, error)) *HorizonClient_Fund_Call {
	_c.Call.Return(run)
	return _c
}

// HomeDomainForAccount provides a mock function with given fields: aid
func (_m *HorizonClient) HomeDomainForAccount(aid string) (string, error) {
	ret := _m.Called(aid)

	if len(ret) == 0 {
		panic("no return value specified for HomeDomainForAccount")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(aid)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(aid)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(aid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_HomeDomainForAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HomeDomainForAccount'
type HorizonClient_HomeDomainForAccount_Call struct {
	*mock.Call
}

// HomeDomainForAccount is a helper method to define mock.On call
//   - aid string
func (_e *HorizonClient_Expecter) HomeDomainForAccount(aid interface{}) *HorizonClient_HomeDomainForAccount_Call {
	return &HorizonClient_HomeDomainForAccount_Call{Call: _e.mock.On("HomeDomainForAccount", aid)}
}

func (_c *HorizonClient_HomeDomainForAccount_Call) Run(run func(aid string)) *HorizonClient_HomeDomainForAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *HorizonClient_HomeDomainForAccount_Call) Return(_a0 string, _a1 error) *HorizonClient_HomeDomainForAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_HomeDomainForAccount_Call) RunAndReturn(run func(string) (string, error)) *HorizonClient_HomeDomainForAccount_Call {
	_c.Call.Return(run)
	return _c
}

// LedgerDetail provides a mock function with given fields: sequence
func (_m *HorizonClient) LedgerDetail(sequence uint32) (horizon.Ledger, error) {
	ret := _m.Called(sequence)

	if len(ret) == 0 {
		panic("no return value specified for LedgerDetail")
	}

	var r0 horizon.Ledger
	var r1 error
	if rf, ok := ret.Get(0).(func(uint32) (horizon.Ledger, error)); ok {
		return rf(sequence)
	}
	if rf, ok := ret.Get(0).(func(uint32) horizon.Ledger); ok {
		r0 = rf(sequence)
	} else {
		r0 = ret.Get(0).(horizon.Ledger)
	}

	if rf, ok := ret.Get(1).(func(uint32) error); ok {
		r1 = rf(sequence)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_LedgerDetail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LedgerDetail'
type HorizonClient_LedgerDetail_Call struct {
	*mock.Call
}

// LedgerDetail is a helper method to define mock.On call
//   - sequence uint32
func (_e *HorizonClient_Expecter) LedgerDetail(sequence interface{}) *HorizonClient_LedgerDetail_Call {
	return &HorizonClient_LedgerDetail_Call{Call: _e.mock.On("LedgerDetail", sequence)}
}

func (_c *HorizonClient_LedgerDetail_Call) Run(run func(sequence uint32)) *HorizonClient_LedgerDetail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint32))
	})
	return _c
}

func (_c *HorizonClient_LedgerDetail_Call) Return(_a0 horizon.Ledger, _a1 error) *HorizonClient_LedgerDetail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_LedgerDetail_Call) RunAndReturn(run func(uint32) (horizon.Ledger, error)) *HorizonClient_LedgerDetail_Call {
	_c.Call.Return(run)
	return _c
}

// Ledgers provides a mock function with given fields: request
func (_m *HorizonClient) Ledgers(request horizonclient.LedgerRequest) (horizon.LedgersPage, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Ledgers")
	}

	var r0 horizon.LedgersPage
	var r1 error
	if rf, ok := ret.Get(0).(func(horizonclient.LedgerRequest) (horizon.LedgersPage, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(horizonclient.LedgerRequest) horizon.LedgersPage); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(horizon.LedgersPage)
	}

	if rf, ok := ret.Get(1).(func(horizonclient.LedgerRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_Ledgers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ledgers'
type HorizonClient_Ledgers_Call struct {
	*mock.Call
}

// Ledgers is a helper method to define mock.On call
//   - request horizonclient.LedgerRequest
func (_e *HorizonClient_Expecter) Ledgers(request interface{}) *HorizonClient_Ledgers_Call {
	return &HorizonClient_Ledgers_Call{Call: _e.mock.On("Ledgers", request)}
}

func (_c *HorizonClient_Ledgers_Call) Run(run func(request horizonclient.LedgerRequest)) *HorizonClient_Ledgers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(horizonclient.LedgerRequest))
	})
	return _c
}

func (_c *HorizonClient_Ledgers_Call) Return(_a0 horizon.LedgersPage, _a1 error) *HorizonClient_Ledgers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_Ledgers_Call) RunAndReturn(run func(horizonclient.LedgerRequest) (horizon.LedgersPage, error)) *HorizonClient_Ledgers_Call {
	_c.Call.Return(run)
	return _c
}

// LiquidityPoolDetail provides a mock function with given fields: request
func (_m *HorizonClient) LiquidityPoolDetail(request horizonclient.LiquidityPoolRequest) (horizon.LiquidityPool, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for LiquidityPoolDetail")
	}

	var r0 horizon.LiquidityPool
	var r1 error
	if rf, ok := ret.Get(0).(func(horizonclient.LiquidityPoolRequest) (horizon.LiquidityPool, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(horizonclient.LiquidityPoolRequest) horizon.LiquidityPool); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(horizon.LiquidityPool)
	}

	if rf, ok := ret.Get(1).(func(horizonclient.LiquidityPoolRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_LiquidityPoolDetail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LiquidityPoolDetail'
type HorizonClient_LiquidityPoolDetail_Call struct {
	*mock.Call
}

// LiquidityPoolDetail is a helper method to define mock.On call
//   - request horizonclient.LiquidityPoolRequest
func (_e *HorizonClient_Expecter) LiquidityPoolDetail(request interface{}) *HorizonClient_LiquidityPoolDetail_Call {
	return &HorizonClient_LiquidityPoolDetail_Call{Call: _e.mock.On("LiquidityPoolDetail", request)}
}

func (_c *HorizonClient_LiquidityPoolDetail_Call) Run(run func(request horizonclient.LiquidityPoolRequest)) *HorizonClient_LiquidityPoolDetail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(horizonclient.LiquidityPoolRequest))
	})
	return _c
}

func (_c *HorizonClient_LiquidityPoolDetail_Call) Return(_a0 horizon.LiquidityPool, _a1 error) *HorizonClient_LiquidityPoolDetail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_LiquidityPoolDetail_Call) RunAndReturn(run func(horizonclient.LiquidityPoolRequest) (horizon.LiquidityPool, error)) *HorizonClient_LiquidityPoolDetail_Call {
	_c.Call.Return(run)
	return _c
}

// LiquidityPools provides a mock function with given fields: request
func (_m *HorizonClient) LiquidityPools(request horizonclient.LiquidityPoolsRequest) (horizon.LiquidityPoolsPage, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for LiquidityPools")
	}

	var r0 horizon.LiquidityPoolsPage
	var r1 error
	if rf, ok := ret.Get(0).(func(horizonclient.LiquidityPoolsRequest) (horizon.LiquidityPoolsPage, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(horizonclient.LiquidityPoolsRequest) horizon.LiquidityPoolsPage); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(horizon.LiquidityPoolsPage)
	}

	if rf, ok := ret.Get(1).(func(horizonclient.LiquidityPoolsRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_LiquidityPools_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LiquidityPools'
type HorizonClient_LiquidityPools_Call struct {
	*mock.Call
}

// LiquidityPools is a helper method to define mock.On call
//   - request horizonclient.LiquidityPoolsRequest
func (_e *HorizonClient_Expecter) LiquidityPools(request interface{}) *HorizonClient_LiquidityPools_Call {
	return &HorizonClient_LiquidityPools_Call{Call: _e.mock.On("LiquidityPools", request)}
}

func (_c *HorizonClient_LiquidityPools_Call) Run(run func(request horizonclient.LiquidityPoolsRequest)) *HorizonClient_LiquidityPools_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(horizonclient.LiquidityPoolsRequest))
	})
	return _c
}

func (_c *HorizonClient_LiquidityPools_Call) Return(_a0 horizon.LiquidityPoolsPage, _a1 error) *HorizonClient_LiquidityPools_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_LiquidityPools_Call) RunAndReturn(run func(horizonclient.LiquidityPoolsRequest) (horizon.LiquidityPoolsPage, error)) *HorizonClient_LiquidityPools_Call {
	_c.Call.Return(run)
	return _c
}

// NextAccountsPage provides a mock function with given fields: _a0
func (_m *HorizonClient) NextAccountsPage(_a0 horizon.AccountsPage) (horizon.AccountsPage, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for NextAccountsPage")
	}

	var r0 horizon.AccountsPage
	var r1 error
	if rf, ok := ret.Get(0).(func(horizon.AccountsPage) (horizon.AccountsPage, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(horizon.AccountsPage) horizon.AccountsPage); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(horizon.AccountsPage)
	}

	if rf, ok := ret.Get(1).(func(horizon.AccountsPage) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_NextAccountsPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NextAccountsPage'
type HorizonClient_NextAccountsPage_Call struct {
	*mock.Call
}

// NextAccountsPage is a helper method to define mock.On call
//   - _a0 horizon.AccountsPage
func (_e *HorizonClient_Expecter) NextAccountsPage(_a0 interface{}) *HorizonClient_NextAccountsPage_Call {
	return &HorizonClient_NextAccountsPage_Call{Call: _e.mock.On("NextAccountsPage", _a0)}
}

func (_c *HorizonClient_NextAccountsPage_Call) Run(run func(_a0 horizon.AccountsPage)) *HorizonClient_NextAccountsPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(horizon.AccountsPage))
	})
	return _c
}

func (_c *HorizonClient_NextAccountsPage_Call) Return(_a0 horizon.AccountsPage, _a1 error) *HorizonClient_NextAccountsPage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_NextAccountsPage_Call) RunAndReturn(run func(horizon.AccountsPage) (horizon.AccountsPage, error)) *HorizonClient_NextAccountsPage_Call {
	_c.Call.Return(run)
	return _c
}

// NextAssetsPage provides a mock function with given fields: _a0
func (_m *HorizonClient) NextAssetsPage(_a0 horizon.AssetsPage) (horizon.AssetsPage, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for NextAssetsPage")
	}

	var r0 horizon.AssetsPage
	var r1 error
	if rf, ok := ret.Get(0).(func(horizon.AssetsPage) (horizon.AssetsPage, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(horizon.AssetsPage) horizon.AssetsPage); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(horizon.AssetsPage)
	}

	if rf, ok := ret.Get(1).(func(horizon.AssetsPage) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_NextAssetsPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NextAssetsPage'
type HorizonClient_NextAssetsPage_Call struct {
	*mock.Call
}

// NextAssetsPage is a helper method to define mock.On call
//   - _a0 horizon.AssetsPage
func (_e *HorizonClient_Expecter) NextAssetsPage(_a0 interface{}) *HorizonClient_NextAssetsPage_Call {
	return &HorizonClient_NextAssetsPage_Call{Call: _e.mock.On("NextAssetsPage", _a0)}
}

func (_c *HorizonClient_NextAssetsPage_Call) Run(run func(_a0 horizon.AssetsPage)) *HorizonClient_NextAssetsPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(horizon.AssetsPage))
	})
	return _c
}

func (_c *HorizonClient_NextAssetsPage_Call) Return(_a0 horizon.AssetsPage, _a1 error) *HorizonClient_NextAssetsPage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_NextAssetsPage_Call) RunAndReturn(run func(horizon.AssetsPage) (horizon.AssetsPage, error)) *HorizonClient_NextAssetsPage_Call {
	_c.Call.Return(run)
	return _c
}

// NextEffectsPage provides a mock function with given fields: _a0
func (_m *HorizonClient) NextEffectsPage(_a0 effects.EffectsPage) (effects.EffectsPage, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for NextEffectsPage")
	}

	var r0 effects.EffectsPage
	var r1 error
	if rf, ok := ret.Get(0).(func(effects.EffectsPage) (effects.EffectsPage, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(effects.EffectsPage) effects.EffectsPage); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(effects.EffectsPage)
	}

	if rf, ok := ret.Get(1).(func(effects.EffectsPage) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_NextEffectsPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NextEffectsPage'
type HorizonClient_NextEffectsPage_Call struct {
	*mock.Call
}

// NextEffectsPage is a helper method to define mock.On call
//   - _a0 effects.EffectsPage
func (_e *HorizonClient_Expecter) NextEffectsPage(_a0 interface{}) *HorizonClient_NextEffectsPage_Call {
	return &HorizonClient_NextEffectsPage_Call{Call: _e.mock.On("NextEffectsPage", _a0)}
}

func (_c *HorizonClient_NextEffectsPage_Call) Run(run func(_a0 effects.EffectsPage)) *HorizonClient_NextEffectsPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(effects.EffectsPage))
	})
	return _c
}

func (_c *HorizonClient_NextEffectsPage_Call) Return(_a0 effects.EffectsPage, _a1 error) *HorizonClient_NextEffectsPage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_NextEffectsPage_Call) RunAndReturn(run func(effects.EffectsPage) (effects.EffectsPage, error)) *HorizonClient_NextEffectsPage_Call {
	_c.Call.Return(run)
	return _c
}

// NextLedgersPage provides a mock function with given fields: _a0
func (_m *HorizonClient) NextLedgersPage(_a0 horizon.LedgersPage) (horizon.LedgersPage, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for NextLedgersPage")
	}

	var r0 horizon.LedgersPage
	var r1 error
	if rf, ok := ret.Get(0).(func(horizon.LedgersPage) (horizon.LedgersPage, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(horizon.LedgersPage) horizon.LedgersPage); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(horizon.LedgersPage)
	}

	if rf, ok := ret.Get(1).(func(horizon.LedgersPage) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_NextLedgersPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NextLedgersPage'
type HorizonClient_NextLedgersPage_Call struct {
	*mock.Call
}

// NextLedgersPage is a helper method to define mock.On call
//   - _a0 horizon.LedgersPage
func (_e *HorizonClient_Expecter) NextLedgersPage(_a0 interface{}) *HorizonClient_NextLedgersPage_Call {
	return &HorizonClient_NextLedgersPage_Call{Call: _e.mock.On("NextLedgersPage", _a0)}
}

func (_c *HorizonClient_NextLedgersPage_Call) Run(run func(_a0 horizon.LedgersPage)) *HorizonClient_NextLedgersPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(horizon.LedgersPage))
	})
	return _c
}

func (_c *HorizonClient_NextLedgersPage_Call) Return(_a0 horizon.LedgersPage, _a1 error) *HorizonClient_NextLedgersPage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_NextLedgersPage_Call) RunAndReturn(run func(horizon.LedgersPage) (horizon.LedgersPage, error)) *HorizonClient_NextLedgersPage_Call {
	_c.Call.Return(run)
	return _c
}

// NextLiquidityPoolsPage provides a mock function with given fields: _a0
func (_m *HorizonClient) NextLiquidityPoolsPage(_a0 horizon.LiquidityPoolsPage) (horizon.LiquidityPoolsPage, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for NextLiquidityPoolsPage")
	}

	var r0 horizon.LiquidityPoolsPage
	var r1 error
	if rf, ok := ret.Get(0).(func(horizon.LiquidityPoolsPage) (horizon.LiquidityPoolsPage, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(horizon.LiquidityPoolsPage) horizon.LiquidityPoolsPage); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(horizon.LiquidityPoolsPage)
	}

	if rf, ok := ret.Get(1).(func(horizon.LiquidityPoolsPage) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_NextLiquidityPoolsPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NextLiquidityPoolsPage'
type HorizonClient_NextLiquidityPoolsPage_Call struct {
	*mock.Call
}

// NextLiquidityPoolsPage is a helper method to define mock.On call
//   - _a0 horizon.LiquidityPoolsPage
func (_e *HorizonClient_Expecter) NextLiquidityPoolsPage(_a0 interface{}) *HorizonClient_NextLiquidityPoolsPage_Call {
	return &HorizonClient_NextLiquidityPoolsPage_Call{Call: _e.mock.On("NextLiquidityPoolsPage", _a0)}
}

func (_c *HorizonClient_NextLiquidityPoolsPage_Call) Run(run func(_a0 horizon.LiquidityPoolsPage)) *HorizonClient_NextLiquidityPoolsPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(horizon.LiquidityPoolsPage))
	})
	return _c
}

func (_c *HorizonClient_NextLiquidityPoolsPage_Call) Return(_a0 horizon.LiquidityPoolsPage, _a1 error) *HorizonClient_NextLiquidityPoolsPage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_NextLiquidityPoolsPage_Call) RunAndReturn(run func(horizon.LiquidityPoolsPage) (horizon.LiquidityPoolsPage, error)) *HorizonClient_NextLiquidityPoolsPage_Call {
	_c.Call.Return(run)
	return _c
}

// NextOffersPage provides a mock function with given fields: _a0
func (_m *HorizonClient) NextOffersPage(_a0 horizon.OffersPage) (horizon.OffersPage, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for NextOffersPage")
	}

	var r0 horizon.OffersPage
	var r1 error
	if rf, ok := ret.Get(0).(func(horizon.OffersPage) (horizon.OffersPage, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(horizon.OffersPage) horizon.OffersPage); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(horizon.OffersPage)
	}

	if rf, ok := ret.Get(1).(func(horizon.OffersPage) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_NextOffersPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NextOffersPage'
type HorizonClient_NextOffersPage_Call struct {
	*mock.Call
}

// NextOffersPage is a helper method to define mock.On call
//   - _a0 horizon.OffersPage
func (_e *HorizonClient_Expecter) NextOffersPage(_a0 interface{}) *HorizonClient_NextOffersPage_Call {
	return &HorizonClient_NextOffersPage_Call{Call: _e.mock.On("NextOffersPage", _a0)}
}

func (_c *HorizonClient_NextOffersPage_Call) Run(run func(_a0 horizon.OffersPage)) *HorizonClient_NextOffersPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(horizon.OffersPage))
	})
	return _c
}

func (_c *HorizonClient_NextOffersPage_Call) Return(_a0 horizon.OffersPage, _a1 error) *HorizonClient_NextOffersPage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_NextOffersPage_Call) RunAndReturn(run func(horizon.OffersPage) (horizon.OffersPage, error)) *HorizonClient_NextOffersPage_Call {
	_c.Call.Return(run)
	return _c
}

// NextOperationsPage provides a mock function with given fields: _a0
func (_m *HorizonClient) NextOperationsPage(_a0 operations.OperationsPage) (operations.OperationsPage, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for NextOperationsPage")
	}

	var r0 operations.OperationsPage
	var r1 error
	if rf, ok := ret.Get(0).(func(operations.OperationsPage) (operations.OperationsPage, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(operations.OperationsPage) operations.OperationsPage); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(operations.OperationsPage)
	}

	if rf, ok := ret.Get(1).(func(operations.OperationsPage) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_NextOperationsPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NextOperationsPage'
type HorizonClient_NextOperationsPage_Call struct {
	*mock.Call
}

// NextOperationsPage is a helper method to define mock.On call
//   - _a0 operations.OperationsPage
func (_e *HorizonClient_Expecter) NextOperationsPage(_a0 interface{}) *HorizonClient_NextOperationsPage_Call {
	return &HorizonClient_NextOperationsPage_Call{Call: _e.mock.On("NextOperationsPage", _a0)}
}

func (_c *HorizonClient_NextOperationsPage_Call) Run(run func(_a0 operations.OperationsPage)) *HorizonClient_NextOperationsPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(operations.OperationsPage))
	})
	return _c
}

func (_c *HorizonClient_NextOperationsPage_Call) Return(_a0 operations.OperationsPage, _a1 error) *HorizonClient_NextOperationsPage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_NextOperationsPage_Call) RunAndReturn(run func(operations.OperationsPage) (operations.OperationsPage, error)) *HorizonClient_NextOperationsPage_Call {
	_c.Call.Return(run)
	return _c
}

// NextPaymentsPage provides a mock function with given fields: _a0
func (_m *HorizonClient) NextPaymentsPage(_a0 operations.OperationsPage) (operations.OperationsPage, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for NextPaymentsPage")
	}

	var r0 operations.OperationsPage
	var r1 error
	if rf, ok := ret.Get(0).(func(operations.OperationsPage) (operations.OperationsPage, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(operations.OperationsPage) operations.OperationsPage); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(operations.OperationsPage)
	}

	if rf, ok := ret.Get(1).(func(operations.OperationsPage) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_NextPaymentsPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NextPaymentsPage'
type HorizonClient_NextPaymentsPage_Call struct {
	*mock.Call
}

// NextPaymentsPage is a helper method to define mock.On call
//   - _a0 operations.OperationsPage
func (_e *HorizonClient_Expecter) NextPaymentsPage(_a0 interface{}) *HorizonClient_NextPaymentsPage_Call {
	return &HorizonClient_NextPaymentsPage_Call{Call: _e.mock.On("NextPaymentsPage", _a0)}
}

func (_c *HorizonClient_NextPaymentsPage_Call) Run(run func(_a0 operations.OperationsPage)) *HorizonClient_NextPaymentsPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(operations.OperationsPage))
	})
	return _c
}

func (_c *HorizonClient_NextPaymentsPage_Call) Return(_a0 operations.OperationsPage, _a1 error) *HorizonClient_NextPaymentsPage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_NextPaymentsPage_Call) RunAndReturn(run func(operations.OperationsPage) (operations.OperationsPage, error)) *HorizonClient_NextPaymentsPage_Call {
	_c.Call.Return(run)
	return _c
}

// NextTradeAggregationsPage provides a mock function with given fields: _a0
func (_m *HorizonClient) NextTradeAggregationsPage(_a0 horizon.TradeAggregationsPage) (horizon.TradeAggregationsPage, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for NextTradeAggregationsPage")
	}

	var r0 horizon.TradeAggregationsPage
	var r1 error
	if rf, ok := ret.Get(0).(func(horizon.TradeAggregationsPage) (horizon.TradeAggregationsPage, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(horizon.TradeAggregationsPage) horizon.TradeAggregationsPage); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(horizon.TradeAggregationsPage)
	}

	if rf, ok := ret.Get(1).(func(horizon.TradeAggregationsPage) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_NextTradeAggregationsPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NextTradeAggregationsPage'
type HorizonClient_NextTradeAggregationsPage_Call struct {
	*mock.Call
}

// NextTradeAggregationsPage is a helper method to define mock.On call
//   - _a0 horizon.TradeAggregationsPage
func (_e *HorizonClient_Expecter) NextTradeAggregationsPage(_a0 interface{}) *HorizonClient_NextTradeAggregationsPage_Call {
	return &HorizonClient_NextTradeAggregationsPage_Call{Call: _e.mock.On("NextTradeAggregationsPage", _a0)}
}

func (_c *HorizonClient_NextTradeAggregationsPage_Call) Run(run func(_a0 horizon.TradeAggregationsPage)) *HorizonClient_NextTradeAggregationsPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(horizon.TradeAggregationsPage))
	})
	return _c
}

func (_c *HorizonClient_NextTradeAggregationsPage_Call) Return(_a0 horizon.TradeAggregationsPage, _a1 error) *HorizonClient_NextTradeAggregationsPage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_NextTradeAggregationsPage_Call) RunAndReturn(run func(horizon.TradeAggregationsPage) (horizon.TradeAggregationsPage, error)) *HorizonClient_NextTradeAggregationsPage_Call {
	_c.Call.Return(run)
	return _c
}

// NextTradesPage provides a mock function with given fields: _a0
func (_m *HorizonClient) NextTradesPage(_a0 horizon.TradesPage) (horizon.TradesPage, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for NextTradesPage")
	}

	var r0 horizon.TradesPage
	var r1 error
	if rf, ok := ret.Get(0).(func(horizon.TradesPage) (horizon.TradesPage, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(horizon.TradesPage) horizon.TradesPage); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(horizon.TradesPage)
	}

	if rf, ok := ret.Get(1).(func(horizon.TradesPage) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_NextTradesPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NextTradesPage'
type HorizonClient_NextTradesPage_Call struct {
	*mock.Call
}

// NextTradesPage is a helper method to define mock.On call
//   - _a0 horizon.TradesPage
func (_e *HorizonClient_Expecter) NextTradesPage(_a0 interface{}) *HorizonClient_NextTradesPage_Call {
	return &HorizonClient_NextTradesPage_Call{Call: _e.mock.On("NextTradesPage", _a0)}
}

func (_c *HorizonClient_NextTradesPage_Call) Run(run func(_a0 horizon.TradesPage)) *HorizonClient_NextTradesPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(horizon.TradesPage))
	})
	return _c
}

func (_c *HorizonClient_NextTradesPage_Call) Return(_a0 horizon.TradesPage, _a1 error) *HorizonClient_NextTradesPage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_NextTradesPage_Call) RunAndReturn(run func(horizon.TradesPage) (horizon.TradesPage, error)) *HorizonClient_NextTradesPage_Call {
	_c.Call.Return(run)
	return _c
}

// NextTransactionsPage provides a mock function with given fields: _a0
func (_m *HorizonClient) NextTransactionsPage(_a0 horizon.TransactionsPage) (horizon.TransactionsPage, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for NextTransactionsPage")
	}

	var r0 horizon.TransactionsPage
	var r1 error
	if rf, ok := ret.Get(0).(func(horizon.TransactionsPage) (horizon.TransactionsPage, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(horizon.TransactionsPage) horizon.TransactionsPage); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(horizon.TransactionsPage)
	}

	if rf, ok := ret.Get(1).(func(horizon.TransactionsPage) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_NextTransactionsPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NextTransactionsPage'
type HorizonClient_NextTransactionsPage_Call struct {
	*mock.Call
}

// NextTransactionsPage is a helper method to define mock.On call
//   - _a0 horizon.TransactionsPage
func (_e *HorizonClient_Expecter) NextTransactionsPage(_a0 interface{}) *HorizonClient_NextTransactionsPage_Call {
	return &HorizonClient_NextTransactionsPage_Call{Call: _e.mock.On("NextTransactionsPage", _a0)}
}

func (_c *HorizonClient_NextTransactionsPage_Call) Run(run func(_a0 horizon.TransactionsPage)) *HorizonClient_NextTransactionsPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(horizon.TransactionsPage))
	})
	return _c
}

func (_c *HorizonClient_NextTransactionsPage_Call) Return(_a0 horizon.TransactionsPage, _a1 error) *HorizonClient_NextTransactionsPage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_NextTransactionsPage_Call) RunAndReturn(run func(horizon.TransactionsPage) (horizon.TransactionsPage, error)) *HorizonClient_NextTransactionsPage_Call {
	_c.Call.Return(run)
	return _c
}

// OfferDetails provides a mock function with given fields: offerID
func (_m *HorizonClient) OfferDetails(offerID string) (horizon.Offer, error) {
	ret := _m.Called(offerID)

	if len(ret) == 0 {
		panic("no return value specified for OfferDetails")
	}

	var r0 horizon.Offer
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (horizon.Offer, error)); ok {
		return rf(offerID)
	}
	if rf, ok := ret.Get(0).(func(string) horizon.Offer); ok {
		r0 = rf(offerID)
	} else {
		r0 = ret.Get(0).(horizon.Offer)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(offerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_OfferDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OfferDetails'
type HorizonClient_OfferDetails_Call struct {
	*mock.Call
}

// OfferDetails is a helper method to define mock.On call
//   - offerID string
func (_e *HorizonClient_Expecter) OfferDetails(offerID interface{}) *HorizonClient_OfferDetails_Call {
	return &HorizonClient_OfferDetails_Call{Call: _e.mock.On("OfferDetails", offerID)}
}

func (_c *HorizonClient_OfferDetails_Call) Run(run func(offerID string)) *HorizonClient_OfferDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *HorizonClient_OfferDetails_Call) Return(offer horizon.Offer, err error) *HorizonClient_OfferDetails_Call {
	_c.Call.Return(offer, err)
	return _c
}

func (_c *HorizonClient_OfferDetails_Call) RunAndReturn(run func(string) (horizon.Offer, error)) *HorizonClient_OfferDetails_Call {
	_c.Call.Return(run)
	return _c
}

// Offers provides a mock function with given fields: request
func (_m *HorizonClient) Offers(request horizonclient.OfferRequest) (horizon.OffersPage, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Offers")
	}

	var r0 horizon.OffersPage
	var r1 error
	if rf, ok := ret.Get(0).(func(horizonclient.OfferRequest) (horizon.OffersPage, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(horizonclient.OfferRequest) horizon.OffersPage); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(horizon.OffersPage)
	}

	if rf, ok := ret.Get(1).(func(horizonclient.OfferRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_Offers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Offers'
type HorizonClient_Offers_Call struct {
	*mock.Call
}

// Offers is a helper method to define mock.On call
//   - request horizonclient.OfferRequest
func (_e *HorizonClient_Expecter) Offers(request interface{}) *HorizonClient_Offers_Call {
	return &HorizonClient_Offers_Call{Call: _e.mock.On("Offers", request)}
}

func (_c *HorizonClient_Offers_Call) Run(run func(request horizonclient.OfferRequest)) *HorizonClient_Offers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(horizonclient.OfferRequest))
	})
	return _c
}

func (_c *HorizonClient_Offers_Call) Return(_a0 horizon.OffersPage, _a1 error) *HorizonClient_Offers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_Offers_Call) RunAndReturn(run func(horizonclient.OfferRequest) (horizon.OffersPage, error)) *HorizonClient_Offers_Call {
	_c.Call.Return(run)
	return _c
}

// OperationDetail provides a mock function with given fields: id
func (_m *HorizonClient) OperationDetail(id string) (operations.Operation, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for OperationDetail")
	}

	var r0 operations.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (operations.Operation, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) operations.Operation); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(operations.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_OperationDetail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OperationDetail'
type HorizonClient_OperationDetail_Call struct {
	*mock.Call
}

// OperationDetail is a helper method to define mock.On call
//   - id string
func (_e *HorizonClient_Expecter) OperationDetail(id interface{}) *HorizonClient_OperationDetail_Call {
	return &HorizonClient_OperationDetail_Call{Call: _e.mock.On("OperationDetail", id)}
}

func (_c *HorizonClient_OperationDetail_Call) Run(run func(id string)) *HorizonClient_OperationDetail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *HorizonClient_OperationDetail_Call) Return(_a0 operations.Operation, _a1 error) *HorizonClient_OperationDetail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_OperationDetail_Call) RunAndReturn(run func(string) (operations.Operation, error)) *HorizonClient_OperationDetail_Call {
	_c.Call.Return(run)
	return _c
}

// Operations provides a mock function with given fields: request
func (_m *HorizonClient) Operations(request horizonclient.OperationRequest) (operations.OperationsPage, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Operations")
	}

	var r0 operations.OperationsPage
	var r1 error
	if rf, ok := ret.Get(0).(func(horizonclient.OperationRequest) (operations.OperationsPage, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(horizonclient.OperationRequest) operations.OperationsPage); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(operations.OperationsPage)
	}

	if rf, ok := ret.Get(1).(func(horizonclient.OperationRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_Operations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Operations'
type HorizonClient_Operations_Call struct {
	*mock.Call
}

// Operations is a helper method to define mock.On call
//   - request horizonclient.OperationRequest
func (_e *HorizonClient_Expecter) Operations(request interface{}) *HorizonClient_Operations_Call {
	return &HorizonClient_Operations_Call{Call: _e.mock.On("Operations", request)}
}

func (_c *HorizonClient_Operations_Call) Run(run func(request horizonclient.OperationRequest)) *HorizonClient_Operations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(horizonclient.OperationRequest))
	})
	return _c
}

func (_c *HorizonClient_Operations_Call) Return(_a0 operations.OperationsPage, _a1 error) *HorizonClient_Operations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_Operations_Call) RunAndReturn(run func(horizonclient.OperationRequest) (operations.OperationsPage, error)) *HorizonClient_Operations_Call {
	_c.Call.Return(run)
	return _c
}

// OrderBook provides a mock function with given fields: request
func (_m *HorizonClient) OrderBook(request horizonclient.OrderBookRequest) (horizon.OrderBookSummary, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for OrderBook")
	}

	var r0 horizon.OrderBookSummary
	var r1 error
	if rf, ok := ret.Get(0).(func(horizonclient.OrderBookRequest) (horizon.OrderBookSummary, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(horizonclient.OrderBookRequest) horizon.OrderBookSummary); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(horizon.OrderBookSummary)
	}

	if rf, ok := ret.Get(1).(func(horizonclient.OrderBookRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_OrderBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrderBook'
type HorizonClient_OrderBook_Call struct {
	*mock.Call
}

// OrderBook is a helper method to define mock.On call
//   - request horizonclient.OrderBookRequest
func (_e *HorizonClient_Expecter) OrderBook(request interface{}) *HorizonClient_OrderBook_Call {
	return &HorizonClient_OrderBook_Call{Call: _e.mock.On("OrderBook", request)}
}

func (_c *HorizonClient_OrderBook_Call) Run(run func(request horizonclient.OrderBookRequest)) *HorizonClient_OrderBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(horizonclient.OrderBookRequest))
	})
	return _c
}

func (_c *HorizonClient_OrderBook_Call) Return(_a0 horizon.OrderBookSummary, _a1 error) *HorizonClient_OrderBook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_OrderBook_Call) RunAndReturn(run func(horizonclient.OrderBookRequest) (horizon.OrderBookSummary, error)) *HorizonClient_OrderBook_Call {
	_c.Call.Return(run)
	return _c
}

// Paths provides a mock function with given fields: request
func (_m *HorizonClient) Paths(request horizonclient.PathsRequest) (horizon.PathsPage, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Paths")
	}

	var r0 horizon.PathsPage
	var r1 error
	if rf, ok := ret.Get(0).(func(horizonclient.PathsRequest) (horizon.PathsPage, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(horizonclient.PathsRequest) horizon.PathsPage); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(horizon.PathsPage)
	}

	if rf, ok := ret.Get(1).(func(horizonclient.PathsRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_Paths_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Paths'
type HorizonClient_Paths_Call struct {
	*mock.Call
}

// Paths is a helper method to define mock.On call
//   - request horizonclient.PathsRequest
func (_e *HorizonClient_Expecter) Paths(request interface{}) *HorizonClient_Paths_Call {
	return &HorizonClient_Paths_Call{Call: _e.mock.On("Paths", request)}
}

func (_c *HorizonClient_Paths_Call) Run(run func(request horizonclient.PathsRequest)) *HorizonClient_Paths_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(horizonclient.PathsRequest))
	})
	return _c
}

func (_c *HorizonClient_Paths_Call) Return(_a0 horizon.PathsPage, _a1 error) *HorizonClient_Paths_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_Paths_Call) RunAndReturn(run func(horizonclient.PathsRequest) (horizon.PathsPage, error)) *HorizonClient_Paths_Call {
	_c.Call.Return(run)
	return _c
}

// Payments provides a mock function with given fields: request
func (_m *HorizonClient) Payments(request horizonclient.OperationRequest) (operations.OperationsPage, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Payments")
	}

	var r0 operations.OperationsPage
	var r1 error
	if rf, ok := ret.Get(0).(func(horizonclient.OperationRequest) (operations.OperationsPage, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(horizonclient.OperationRequest) operations.OperationsPage); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(operations.OperationsPage)
	}

	if rf, ok := ret.Get(1).(func(horizonclient.OperationRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_Payments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Payments'
type HorizonClient_Payments_Call struct {
	*mock.Call
}

// Payments is a helper method to define mock.On call
//   - request horizonclient.OperationRequest
func (_e *HorizonClient_Expecter) Payments(request interface{}) *HorizonClient_Payments_Call {
	return &HorizonClient_Payments_Call{Call: _e.mock.On("Payments", request)}
}

func (_c *HorizonClient_Payments_Call) Run(run func(request horizonclient.OperationRequest)) *HorizonClient_Payments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(horizonclient.OperationRequest))
	})
	return _c
}

func (_c *HorizonClient_Payments_Call) Return(_a0 operations.OperationsPage, _a1 error) *HorizonClient_Payments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_Payments_Call) RunAndReturn(run func(horizonclient.OperationRequest) (operations.OperationsPage, error)) *HorizonClient_Payments_Call {
	_c.Call.Return(run)
	return _c
}

// PrevAssetsPage provides a mock function with given fields: _a0
func (_m *HorizonClient) PrevAssetsPage(_a0 horizon.AssetsPage) (horizon.AssetsPage, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PrevAssetsPage")
	}

	var r0 horizon.AssetsPage
	var r1 error
	if rf, ok := ret.Get(0).(func(horizon.AssetsPage) (horizon.AssetsPage, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(horizon.AssetsPage) horizon.AssetsPage); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(horizon.AssetsPage)
	}

	if rf, ok := ret.Get(1).(func(horizon.AssetsPage) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_PrevAssetsPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrevAssetsPage'
type HorizonClient_PrevAssetsPage_Call struct {
	*mock.Call
}

// PrevAssetsPage is a helper method to define mock.On call
//   - _a0 horizon.AssetsPage
func (_e *HorizonClient_Expecter) PrevAssetsPage(_a0 interface{}) *HorizonClient_PrevAssetsPage_Call {
	return &HorizonClient_PrevAssetsPage_Call{Call: _e.mock.On("PrevAssetsPage", _a0)}
}

func (_c *HorizonClient_PrevAssetsPage_Call) Run(run func(_a0 horizon.AssetsPage)) *HorizonClient_PrevAssetsPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(horizon.AssetsPage))
	})
	return _c
}

func (_c *HorizonClient_PrevAssetsPage_Call) Return(_a0 horizon.AssetsPage, _a1 error) *HorizonClient_PrevAssetsPage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_PrevAssetsPage_Call) RunAndReturn(run func(horizon.AssetsPage) (horizon.AssetsPage, error)) *HorizonClient_PrevAssetsPage_Call {
	_c.Call.Return(run)
	return _c
}

// PrevEffectsPage provides a mock function with given fields: _a0
func (_m *HorizonClient) PrevEffectsPage(_a0 effects.EffectsPage) (effects.EffectsPage, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PrevEffectsPage")
	}

	var r0 effects.EffectsPage
	var r1 error
	if rf, ok := ret.Get(0).(func(effects.EffectsPage) (effects.EffectsPage, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(effects.EffectsPage) effects.EffectsPage); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(effects.EffectsPage)
	}

	if rf, ok := ret.Get(1).(func(effects.EffectsPage) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_PrevEffectsPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrevEffectsPage'
type HorizonClient_PrevEffectsPage_Call struct {
	*mock.Call
}

// PrevEffectsPage is a helper method to define mock.On call
//   - _a0 effects.EffectsPage
func (_e *HorizonClient_Expecter) PrevEffectsPage(_a0 interface{}) *HorizonClient_PrevEffectsPage_Call {
	return &HorizonClient_PrevEffectsPage_Call{Call: _e.mock.On("PrevEffectsPage", _a0)}
}

func (_c *HorizonClient_PrevEffectsPage_Call) Run(run func(_a0 effects.EffectsPage)) *HorizonClient_PrevEffectsPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(effects.EffectsPage))
	})
	return _c
}

func (_c *HorizonClient_PrevEffectsPage_Call) Return(_a0 effects.EffectsPage, _a1 error) *HorizonClient_PrevEffectsPage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_PrevEffectsPage_Call) RunAndReturn(run func(effects.EffectsPage) (effects.EffectsPage, error)) *HorizonClient_PrevEffectsPage_Call {
	_c.Call.Return(run)
	return _c
}

// PrevLedgersPage provides a mock function with given fields: _a0
func (_m *HorizonClient) PrevLedgersPage(_a0 horizon.LedgersPage) (horizon.LedgersPage, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PrevLedgersPage")
	}

	var r0 horizon.LedgersPage
	var r1 error
	if rf, ok := ret.Get(0).(func(horizon.LedgersPage) (horizon.LedgersPage, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(horizon.LedgersPage) horizon.LedgersPage); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(horizon.LedgersPage)
	}

	if rf, ok := ret.Get(1).(func(horizon.LedgersPage) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_PrevLedgersPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrevLedgersPage'
type HorizonClient_PrevLedgersPage_Call struct {
	*mock.Call
}

// PrevLedgersPage is a helper method to define mock.On call
//   - _a0 horizon.LedgersPage
func (_e *HorizonClient_Expecter) PrevLedgersPage(_a0 interface{}) *HorizonClient_PrevLedgersPage_Call {
	return &HorizonClient_PrevLedgersPage_Call{Call: _e.mock.On("PrevLedgersPage", _a0)}
}

func (_c *HorizonClient_PrevLedgersPage_Call) Run(run func(_a0 horizon.LedgersPage)) *HorizonClient_PrevLedgersPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(horizon.LedgersPage))
	})
	return _c
}

func (_c *HorizonClient_PrevLedgersPage_Call) Return(_a0 horizon.LedgersPage, _a1 error) *HorizonClient_PrevLedgersPage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_PrevLedgersPage_Call) RunAndReturn(run func(horizon.LedgersPage) (horizon.LedgersPage, error)) *HorizonClient_PrevLedgersPage_Call {
	_c.Call.Return(run)
	return _c
}

// PrevLiquidityPoolsPage provides a mock function with given fields: _a0
func (_m *HorizonClient) PrevLiquidityPoolsPage(_a0 horizon.LiquidityPoolsPage) (horizon.LiquidityPoolsPage, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PrevLiquidityPoolsPage")
	}

	var r0 horizon.LiquidityPoolsPage
	var r1 error
	if rf, ok := ret.Get(0).(func(horizon.LiquidityPoolsPage) (horizon.LiquidityPoolsPage, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(horizon.LiquidityPoolsPage) horizon.LiquidityPoolsPage); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(horizon.LiquidityPoolsPage)
	}

	if rf, ok := ret.Get(1).(func(horizon.LiquidityPoolsPage) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_PrevLiquidityPoolsPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrevLiquidityPoolsPage'
type HorizonClient_PrevLiquidityPoolsPage_Call struct {
	*mock.Call
}

// PrevLiquidityPoolsPage is a helper method to define mock.On call
//   - _a0 horizon.LiquidityPoolsPage
func (_e *HorizonClient_Expecter) PrevLiquidityPoolsPage(_a0 interface{}) *HorizonClient_PrevLiquidityPoolsPage_Call {
	return &HorizonClient_PrevLiquidityPoolsPage_Call{Call: _e.mock.On("PrevLiquidityPoolsPage", _a0)}
}

func (_c *HorizonClient_PrevLiquidityPoolsPage_Call) Run(run func(_a0 horizon.LiquidityPoolsPage)) *HorizonClient_PrevLiquidityPoolsPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(horizon.LiquidityPoolsPage))
	})
	return _c
}

func (_c *HorizonClient_PrevLiquidityPoolsPage_Call) Return(_a0 horizon.LiquidityPoolsPage, _a1 error) *HorizonClient_PrevLiquidityPoolsPage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_PrevLiquidityPoolsPage_Call) RunAndReturn(run func(horizon.LiquidityPoolsPage) (horizon.LiquidityPoolsPage, error)) *HorizonClient_PrevLiquidityPoolsPage_Call {
	_c.Call.Return(run)
	return _c
}

// PrevOffersPage provides a mock function with given fields: _a0
func (_m *HorizonClient) PrevOffersPage(_a0 horizon.OffersPage) (horizon.OffersPage, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PrevOffersPage")
	}

	var r0 horizon.OffersPage
	var r1 error
	if rf, ok := ret.Get(0).(func(horizon.OffersPage) (horizon.OffersPage, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(horizon.OffersPage) horizon.OffersPage); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(horizon.OffersPage)
	}

	if rf, ok := ret.Get(1).(func(horizon.OffersPage) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_PrevOffersPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrevOffersPage'
type HorizonClient_PrevOffersPage_Call struct {
	*mock.Call
}

// PrevOffersPage is a helper method to define mock.On call
//   - _a0 horizon.OffersPage
func (_e *HorizonClient_Expecter) PrevOffersPage(_a0 interface{}) *HorizonClient_PrevOffersPage_Call {
	return &HorizonClient_PrevOffersPage_Call{Call: _e.mock.On("PrevOffersPage", _a0)}
}

func (_c *HorizonClient_PrevOffersPage_Call) Run(run func(_a0 horizon.OffersPage)) *HorizonClient_PrevOffersPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(horizon.OffersPage))
	})
	return _c
}

func (_c *HorizonClient_PrevOffersPage_Call) Return(_a0 horizon.OffersPage, _a1 error) *HorizonClient_PrevOffersPage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_PrevOffersPage_Call) RunAndReturn(run func(horizon.OffersPage) (horizon.OffersPage, error)) *HorizonClient_PrevOffersPage_Call {
	_c.Call.Return(run)
	return _c
}

// PrevOperationsPage provides a mock function with given fields: _a0
func (_m *HorizonClient) PrevOperationsPage(_a0 operations.OperationsPage) (operations.OperationsPage, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PrevOperationsPage")
	}

	var r0 operations.OperationsPage
	var r1 error
	if rf, ok := ret.Get(0).(func(operations.OperationsPage) (operations.OperationsPage, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(operations.OperationsPage) operations.OperationsPage); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(operations.OperationsPage)
	}

	if rf, ok := ret.Get(1).(func(operations.OperationsPage) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_PrevOperationsPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrevOperationsPage'
type HorizonClient_PrevOperationsPage_Call struct {
	*mock.Call
}

// PrevOperationsPage is a helper method to define mock.On call
//   - _a0 operations.OperationsPage
func (_e *HorizonClient_Expecter) PrevOperationsPage(_a0 interface{}) *HorizonClient_PrevOperationsPage_Call {
	return &HorizonClient_PrevOperationsPage_Call{Call: _e.mock.On("PrevOperationsPage", _a0)}
}

func (_c *HorizonClient_PrevOperationsPage_Call) Run(run func(_a0 operations.OperationsPage)) *HorizonClient_PrevOperationsPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(operations.OperationsPage))
	})
	return _c
}

func (_c *HorizonClient_PrevOperationsPage_Call) Return(_a0 operations.OperationsPage, _a1 error) *HorizonClient_PrevOperationsPage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_PrevOperationsPage_Call) RunAndReturn(run func(operations.OperationsPage) (operations.OperationsPage, error)) *HorizonClient_PrevOperationsPage_Call {
	_c.Call.Return(run)
	return _c
}

// PrevPaymentsPage provides a mock function with given fields: _a0
func (_m *HorizonClient) PrevPaymentsPage(_a0 operations.OperationsPage) (operations.OperationsPage, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PrevPaymentsPage")
	}

	var r0 operations.OperationsPage
	var r1 error
	if rf, ok := ret.Get(0).(func(operations.OperationsPage) (operations.OperationsPage, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(operations.OperationsPage) operations.OperationsPage); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(operations.OperationsPage)
	}

	if rf, ok := ret.Get(1).(func(operations.OperationsPage) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_PrevPaymentsPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrevPaymentsPage'
type HorizonClient_PrevPaymentsPage_Call struct {
	*mock.Call
}

// PrevPaymentsPage is a helper method to define mock.On call
//   - _a0 operations.OperationsPage
func (_e *HorizonClient_Expecter) PrevPaymentsPage(_a0 interface{}) *HorizonClient_PrevPaymentsPage_Call {
	return &HorizonClient_PrevPaymentsPage_Call{Call: _e.mock.On("PrevPaymentsPage", _a0)}
}

func (_c *HorizonClient_PrevPaymentsPage_Call) Run(run func(_a0 operations.OperationsPage)) *HorizonClient_PrevPaymentsPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(operations.OperationsPage))
	})
	return _c
}

func (_c *HorizonClient_PrevPaymentsPage_Call) Return(_a0 operations.OperationsPage, _a1 error) *HorizonClient_PrevPaymentsPage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_PrevPaymentsPage_Call) RunAndReturn(run func(operations.OperationsPage) (operations.OperationsPage, error)) *HorizonClient_PrevPaymentsPage_Call {
	_c.Call.Return(run)
	return _c
}

// PrevTradeAggregationsPage provides a mock function with given fields: _a0
func (_m *HorizonClient) PrevTradeAggregationsPage(_a0 horizon.TradeAggregationsPage) (horizon.TradeAggregationsPage, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PrevTradeAggregationsPage")
	}

	var r0 horizon.TradeAggregationsPage
	var r1 error
	if rf, ok := ret.Get(0).(func(horizon.TradeAggregationsPage) (horizon.TradeAggregationsPage, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(horizon.TradeAggregationsPage) horizon.TradeAggregationsPage); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(horizon.TradeAggregationsPage)
	}

	if rf, ok := ret.Get(1).(func(horizon.TradeAggregationsPage) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_PrevTradeAggregationsPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrevTradeAggregationsPage'
type HorizonClient_PrevTradeAggregationsPage_Call struct {
	*mock.Call
}

// PrevTradeAggregationsPage is a helper method to define mock.On call
//   - _a0 horizon.TradeAggregationsPage
func (_e *HorizonClient_Expecter) PrevTradeAggregationsPage(_a0 interface{}) *HorizonClient_PrevTradeAggregationsPage_Call {
	return &HorizonClient_PrevTradeAggregationsPage_Call{Call: _e.mock.On("PrevTradeAggregationsPage", _a0)}
}

func (_c *HorizonClient_PrevTradeAggregationsPage_Call) Run(run func(_a0 horizon.TradeAggregationsPage)) *HorizonClient_PrevTradeAggregationsPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(horizon.TradeAggregationsPage))
	})
	return _c
}

func (_c *HorizonClient_PrevTradeAggregationsPage_Call) Return(_a0 horizon.TradeAggregationsPage, _a1 error) *HorizonClient_PrevTradeAggregationsPage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_PrevTradeAggregationsPage_Call) RunAndReturn(run func(horizon.TradeAggregationsPage) (horizon.TradeAggregationsPage, error)) *HorizonClient_PrevTradeAggregationsPage_Call {
	_c.Call.Return(run)
	return _c
}

// PrevTradesPage provides a mock function with given fields: _a0
func (_m *HorizonClient) PrevTradesPage(_a0 horizon.TradesPage) (horizon.TradesPage, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PrevTradesPage")
	}

	var r0 horizon.TradesPage
	var r1 error
	if rf, ok := ret.Get(0).(func(horizon.TradesPage) (horizon.TradesPage, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(horizon.TradesPage) horizon.TradesPage); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(horizon.TradesPage)
	}

	if rf, ok := ret.Get(1).(func(horizon.TradesPage) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_PrevTradesPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrevTradesPage'
type HorizonClient_PrevTradesPage_Call struct {
	*mock.Call
}

// PrevTradesPage is a helper method to define mock.On call
//   - _a0 horizon.TradesPage
func (_e *HorizonClient_Expecter) PrevTradesPage(_a0 interface{}) *HorizonClient_PrevTradesPage_Call {
	return &HorizonClient_PrevTradesPage_Call{Call: _e.mock.On("PrevTradesPage", _a0)}
}

func (_c *HorizonClient_PrevTradesPage_Call) Run(run func(_a0 horizon.TradesPage)) *HorizonClient_PrevTradesPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(horizon.TradesPage))
	})
	return _c
}

func (_c *HorizonClient_PrevTradesPage_Call) Return(_a0 horizon.TradesPage, _a1 error) *HorizonClient_PrevTradesPage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_PrevTradesPage_Call) RunAndReturn(run func(horizon.TradesPage) (horizon.TradesPage, error)) *HorizonClient_PrevTradesPage_Call {
	_c.Call.Return(run)
	return _c
}

// PrevTransactionsPage provides a mock function with given fields: _a0
func (_m *HorizonClient) PrevTransactionsPage(_a0 horizon.TransactionsPage) (horizon.TransactionsPage, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PrevTransactionsPage")
	}

	var r0 horizon.TransactionsPage
	var r1 error
	if rf, ok := ret.Get(0).(func(horizon.TransactionsPage) (horizon.TransactionsPage, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(horizon.TransactionsPage) horizon.TransactionsPage); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(horizon.TransactionsPage)
	}

	if rf, ok := ret.Get(1).(func(horizon.TransactionsPage) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_PrevTransactionsPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrevTransactionsPage'
type HorizonClient_PrevTransactionsPage_Call struct {
	*mock.Call
}

// PrevTransactionsPage is a helper method to define mock.On call
//   - _a0 horizon.TransactionsPage
func (_e *HorizonClient_Expecter) PrevTransactionsPage(_a0 interface{}) *HorizonClient_PrevTransactionsPage_Call {
	return &HorizonClient_PrevTransactionsPage_Call{Call: _e.mock.On("PrevTransactionsPage", _a0)}
}

func (_c *HorizonClient_PrevTransactionsPage_Call) Run(run func(_a0 horizon.TransactionsPage)) *HorizonClient_PrevTransactionsPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(horizon.TransactionsPage))
	})
	return _c
}

func (_c *HorizonClient_PrevTransactionsPage_Call) Return(_a0 horizon.TransactionsPage, _a1 error) *HorizonClient_PrevTransactionsPage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_PrevTransactionsPage_Call) RunAndReturn(run func(horizon.TransactionsPage) (horizon.TransactionsPage, error)) *HorizonClient_PrevTransactionsPage_Call {
	_c.Call.Return(run)
	return _c
}

// Root provides a mock function with given fields:
func (_m *HorizonClient) Root() (horizon.Root, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Root")
	}

	var r0 horizon.Root
	var r1 error
	if rf, ok := ret.Get(0).(func() (horizon.Root, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() horizon.Root); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(horizon.Root)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_Root_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Root'
type HorizonClient_Root_Call struct {
	*mock.Call
}

// Root is a helper method to define mock.On call
func (_e *HorizonClient_Expecter) Root() *HorizonClient_Root_Call {
	return &HorizonClient_Root_Call{Call: _e.mock.On("Root")}
}

func (_c *HorizonClient_Root_Call) Run(run func()) *HorizonClient_Root_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *HorizonClient_Root_Call) Return(_a0 horizon.Root, _a1 error) *HorizonClient_Root_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_Root_Call) RunAndReturn(run func() (horizon.Root, error)) *HorizonClient_Root_Call {
	_c.Call.Return(run)
	return _c
}

// StreamEffects provides a mock function with given fields: ctx, request, handler
func (_m *HorizonClient) StreamEffects(ctx context.Context, request horizonclient.EffectRequest, handler horizonclient.EffectHandler) error {
	ret := _m.Called(ctx, request, handler)

	if len(ret) == 0 {
		panic("no return value specified for StreamEffects")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, horizonclient.EffectRequest, horizonclient.EffectHandler) error); ok {
		r0 = rf(ctx, request, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HorizonClient_StreamEffects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamEffects'
type HorizonClient_StreamEffects_Call struct {
	*mock.Call
}

// StreamEffects is a helper method to define mock.On call
//   - ctx context.Context
//   - request horizonclient.EffectRequest
//   - handler horizonclient.EffectHandler
func (_e *HorizonClient_Expecter) StreamEffects(ctx interface{}, request interface{}, handler interface{}) *HorizonClient_StreamEffects_Call {
	return &HorizonClient_StreamEffects_Call{Call: _e.mock.On("StreamEffects", ctx, request, handler)}
}

func (_c *HorizonClient_StreamEffects_Call) Run(run func(ctx context.Context, request horizonclient.EffectRequest, handler horizonclient.EffectHandler)) *HorizonClient_StreamEffects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(horizonclient.EffectRequest), args[2].(horizonclient.EffectHandler))
	})
	return _c
}

func (_c *HorizonClient_StreamEffects_Call) Return(_a0 error) *HorizonClient_StreamEffects_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HorizonClient_StreamEffects_Call) RunAndReturn(run func(context.Context, horizonclient.EffectRequest, horizonclient.EffectHandler) error) *HorizonClient_StreamEffects_Call {
	_c.Call.Return(run)
	return _c
}

// StreamLedgers provides a mock function with given fields: ctx, request, handler
func (_m *HorizonClient) StreamLedgers(ctx context.Context, request horizonclient.LedgerRequest, handler horizonclient.LedgerHandler) error {
	ret := _m.Called(ctx, request, handler)

	if len(ret) == 0 {
		panic("no return value specified for StreamLedgers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, horizonclient.LedgerRequest, horizonclient.LedgerHandler) error); ok {
		r0 = rf(ctx, request, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HorizonClient_StreamLedgers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamLedgers'
type HorizonClient_StreamLedgers_Call struct {
	*mock.Call
}

// StreamLedgers is a helper method to define mock.On call
//   - ctx context.Context
//   - request horizonclient.LedgerRequest
//   - handler horizonclient.LedgerHandler
func (_e *HorizonClient_Expecter) StreamLedgers(ctx interface{}, request interface{}, handler interface{}) *HorizonClient_StreamLedgers_Call {
	return &HorizonClient_StreamLedgers_Call{Call: _e.mock.On("StreamLedgers", ctx, request, handler)}
}

func (_c *HorizonClient_StreamLedgers_Call) Run(run func(ctx context.Context, request horizonclient.LedgerRequest, handler horizonclient.LedgerHandler)) *HorizonClient_StreamLedgers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(horizonclient.LedgerRequest), args[2].(horizonclient.LedgerHandler))
	})
	return _c
}

func (_c *HorizonClient_StreamLedgers_Call) Return(_a0 error) *HorizonClient_StreamLedgers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HorizonClient_StreamLedgers_Call) RunAndReturn(run func(context.Context, horizonclient.LedgerRequest, horizonclient.LedgerHandler) error) *HorizonClient_StreamLedgers_Call {
	_c.Call.Return(run)
	return _c
}

// StreamOffers provides a mock function with given fields: ctx, request, handler
func (_m *HorizonClient) StreamOffers(ctx context.Context, request horizonclient.OfferRequest, handler horizonclient.OfferHandler) error {
	ret := _m.Called(ctx, request, handler)

	if len(ret) == 0 {
		panic("no return value specified for StreamOffers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, horizonclient.OfferRequest, horizonclient.OfferHandler) error); ok {
		r0 = rf(ctx, request, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HorizonClient_StreamOffers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamOffers'
type HorizonClient_StreamOffers_Call struct {
	*mock.Call
}

// StreamOffers is a helper method to define mock.On call
//   - ctx context.Context
//   - request horizonclient.OfferRequest
//   - handler horizonclient.OfferHandler
func (_e *HorizonClient_Expecter) StreamOffers(ctx interface{}, request interface{}, handler interface{}) *HorizonClient_StreamOffers_Call {
	return &HorizonClient_StreamOffers_Call{Call: _e.mock.On("StreamOffers", ctx, request, handler)}
}

func (_c *HorizonClient_StreamOffers_Call) Run(run func(ctx context.Context, request horizonclient.OfferRequest, handler horizonclient.OfferHandler)) *HorizonClient_StreamOffers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(horizonclient.OfferRequest), args[2].(horizonclient.OfferHandler))
	})
	return _c
}

func (_c *HorizonClient_StreamOffers_Call) Return(_a0 error) *HorizonClient_StreamOffers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HorizonClient_StreamOffers_Call) RunAndReturn(run func(context.Context, horizonclient.OfferRequest, horizonclient.OfferHandler) error) *HorizonClient_StreamOffers_Call {
	_c.Call.Return(run)
	return _c
}

// StreamOperations provides a mock function with given fields: ctx, request, handler
func (_m *HorizonClient) StreamOperations(ctx context.Context, request horizonclient.OperationRequest, handler horizonclient.OperationHandler) error {
	ret := _m.Called(ctx, request, handler)

	if len(ret) == 0 {
		panic("no return value specified for StreamOperations")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, horizonclient.OperationRequest, horizonclient.OperationHandler) error); ok {
		r0 = rf(ctx, request, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HorizonClient_StreamOperations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamOperations'
type HorizonClient_StreamOperations_Call struct {
	*mock.Call
}

// StreamOperations is a helper method to define mock.On call
//   - ctx context.Context
//   - request horizonclient.OperationRequest
//   - handler horizonclient.OperationHandler
func (_e *HorizonClient_Expecter) StreamOperations(ctx interface{}, request interface{}, handler interface{}) *HorizonClient_StreamOperations_Call {
	return &HorizonClient_StreamOperations_Call{Call: _e.mock.On("StreamOperations", ctx, request, handler)}
}

func (_c *HorizonClient_StreamOperations_Call) Run(run func(ctx context.Context, request horizonclient.OperationRequest, handler horizonclient.OperationHandler)) *HorizonClient_StreamOperations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(horizonclient.OperationRequest), args[2].(horizonclient.OperationHandler))
	})
	return _c
}

func (_c *HorizonClient_StreamOperations_Call) Return(_a0 error) *HorizonClient_StreamOperations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HorizonClient_StreamOperations_Call) RunAndReturn(run func(context.Context, horizonclient.OperationRequest, horizonclient.OperationHandler) error) *HorizonClient_StreamOperations_Call {
	_c.Call.Return(run)
	return _c
}

// StreamOrderBooks provides a mock function with given fields: ctx, request, handler
func (_m *HorizonClient) StreamOrderBooks(ctx context.Context, request horizonclient.OrderBookRequest, handler horizonclient.OrderBookHandler) error {
	ret := _m.Called(ctx, request, handler)

	if len(ret) == 0 {
		panic("no return value specified for StreamOrderBooks")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, horizonclient.OrderBookRequest, horizonclient.OrderBookHandler) error); ok {
		r0 = rf(ctx, request, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HorizonClient_StreamOrderBooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamOrderBooks'
type HorizonClient_StreamOrderBooks_Call struct {
	*mock.Call
}

// StreamOrderBooks is a helper method to define mock.On call
//   - ctx context.Context
//   - request horizonclient.OrderBookRequest
//   - handler horizonclient.OrderBookHandler
func (_e *HorizonClient_Expecter) StreamOrderBooks(ctx interface{}, request interface{}, handler interface{}) *HorizonClient_StreamOrderBooks_Call {
	return &HorizonClient_StreamOrderBooks_Call{Call: _e.mock.On("StreamOrderBooks", ctx, request, handler)}
}

func (_c *HorizonClient_StreamOrderBooks_Call) Run(run func(ctx context.Context, request horizonclient.OrderBookRequest, handler horizonclient.OrderBookHandler)) *HorizonClient_StreamOrderBooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(horizonclient.OrderBookRequest), args[2].(horizonclient.OrderBookHandler))
	})
	return _c
}

func (_c *HorizonClient_StreamOrderBooks_Call) Return(_a0 error) *HorizonClient_StreamOrderBooks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HorizonClient_StreamOrderBooks_Call) RunAndReturn(run func(context.Context, horizonclient.OrderBookRequest, horizonclient.OrderBookHandler) error) *HorizonClient_StreamOrderBooks_Call {
	_c.Call.Return(run)
	return _c
}

// StreamPayments provides a mock function with given fields: ctx, request, handler
func (_m *HorizonClient) StreamPayments(ctx context.Context, request horizonclient.OperationRequest, handler horizonclient.OperationHandler) error {
	ret := _m.Called(ctx, request, handler)

	if len(ret) == 0 {
		panic("no return value specified for StreamPayments")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, horizonclient.OperationRequest, horizonclient.OperationHandler) error); ok {
		r0 = rf(ctx, request, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HorizonClient_StreamPayments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamPayments'
type HorizonClient_StreamPayments_Call struct {
	*mock.Call
}

// StreamPayments is a helper method to define mock.On call
//   - ctx context.Context
//   - request horizonclient.OperationRequest
//   - handler horizonclient.OperationHandler
func (_e *HorizonClient_Expecter) StreamPayments(ctx interface{}, request interface{}, handler interface{}) *HorizonClient_StreamPayments_Call {
	return &HorizonClient_StreamPayments_Call{Call: _e.mock.On("StreamPayments", ctx, request, handler)}
}

func (_c *HorizonClient_StreamPayments_Call) Run(run func(ctx context.Context, request horizonclient.OperationRequest, handler horizonclient.OperationHandler)) *HorizonClient_StreamPayments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(horizonclient.OperationRequest), args[2].(horizonclient.OperationHandler))
	})
	return _c
}

func (_c *HorizonClient_StreamPayments_Call) Return(_a0 error) *HorizonClient_StreamPayments_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HorizonClient_StreamPayments_Call) RunAndReturn(run func(context.Context, horizonclient.OperationRequest, horizonclient.OperationHandler) error) *HorizonClient_StreamPayments_Call {
	_c.Call.Return(run)
	return _c
}

// StreamTrades provides a mock function with given fields: ctx, request, handler
func (_m *HorizonClient) StreamTrades(ctx context.Context, request horizonclient.TradeRequest, handler horizonclient.TradeHandler) error {
	ret := _m.Called(ctx, request, handler)

	if len(ret) == 0 {
		panic("no return value specified for StreamTrades")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, horizonclient.TradeRequest, horizonclient.TradeHandler) error); ok {
		r0 = rf(ctx, request, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HorizonClient_StreamTrades_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamTrades'
type HorizonClient_StreamTrades_Call struct {
	*mock.Call
}

// StreamTrades is a helper method to define mock.On call
//   - ctx context.Context
//   - request horizonclient.TradeRequest
//   - handler horizonclient.TradeHandler
func (_e *HorizonClient_Expecter) StreamTrades(ctx interface{}, request interface{}, handler interface{}) *HorizonClient_StreamTrades_Call {
	return &HorizonClient_StreamTrades_Call{Call: _e.mock.On("StreamTrades", ctx, request, handler)}
}

func (_c *HorizonClient_StreamTrades_Call) Run(run func(ctx context.Context, request horizonclient.TradeRequest, handler horizonclient.TradeHandler)) *HorizonClient_StreamTrades_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(horizonclient.TradeRequest), args[2].(horizonclient.TradeHandler))
	})
	return _c
}

func (_c *HorizonClient_StreamTrades_Call) Return(_a0 error) *HorizonClient_StreamTrades_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HorizonClient_StreamTrades_Call) RunAndReturn(run func(context.Context, horizonclient.TradeRequest, horizonclient.TradeHandler) error) *HorizonClient_StreamTrades_Call {
	_c.Call.Return(run)
	return _c
}

// StreamTransactions provides a mock function with given fields: ctx, request, handler
func (_m *HorizonClient) StreamTransactions(ctx context.Context, request horizonclient.TransactionRequest, handler horizonclient.TransactionHandler) error {
	ret := _m.Called(ctx, request, handler)

	if len(ret) == 0 {
		panic("no return value specified for StreamTransactions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, horizonclient.TransactionRequest, horizonclient.TransactionHandler) error); ok {
		r0 = rf(ctx, request, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HorizonClient_StreamTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamTransactions'
type HorizonClient_StreamTransactions_Call struct {
	*mock.Call
}

// StreamTransactions is a helper method to define mock.On call
//   - ctx context.Context
//   - request horizonclient.TransactionRequest
//   - handler horizonclient.TransactionHandler
func (_e *HorizonClient_Expecter) StreamTransactions(ctx interface{}, request interface{}, handler interface{}) *HorizonClient_StreamTransactions_Call {
	return &HorizonClient_StreamTransactions_Call{Call: _e.mock.On("StreamTransactions", ctx, request, handler)}
}

func (_c *HorizonClient_StreamTransactions_Call) Run(run func(ctx context.Context, request horizonclient.TransactionRequest, handler horizonclient.TransactionHandler)) *HorizonClient_StreamTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(horizonclient.TransactionRequest), args[2].(horizonclient.TransactionHandler))
	})
	return _c
}

func (_c *HorizonClient_StreamTransactions_Call) Return(_a0 error) *HorizonClient_StreamTransactions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HorizonClient_StreamTransactions_Call) RunAndReturn(run func(context.Context, horizonclient.TransactionRequest, horizonclient.TransactionHandler) error) *HorizonClient_StreamTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// SubmitFeeBumpTransaction provides a mock function with given fields: transaction
func (_m *HorizonClient) SubmitFeeBumpTransaction(transaction *txnbuild.FeeBumpTransaction) (horizon.Transaction, error) {
	ret := _m.Called(transaction)

	if len(ret) == 0 {
		panic("no return value specified for SubmitFeeBumpTransaction")
	}

	var r0 horizon.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*txnbuild.FeeBumpTransaction) (horizon.Transaction, error)); ok {
		return rf(transaction)
	}
	if rf, ok := ret.Get(0).(func(*txnbuild.FeeBumpTransaction) horizon.Transaction); ok {
		r0 = rf(transaction)
	} else {
		r0 = ret.Get(0).(horizon.Transaction)
	}

	if rf, ok := ret.Get(1).(func(*txnbuild.FeeBumpTransaction) error); ok {
		r1 = rf(transaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_SubmitFeeBumpTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitFeeBumpTransaction'
type HorizonClient_SubmitFeeBumpTransaction_Call struct {
	*mock.Call
}

// SubmitFeeBumpTransaction is a helper method to define mock.On call
//   - transaction *txnbuild.FeeBumpTransaction
func (_e *HorizonClient_Expecter) SubmitFeeBumpTransaction(transaction interface{}) *HorizonClient_SubmitFeeBumpTransaction_Call {
	return &HorizonClient_SubmitFeeBumpTransaction_Call{Call: _e.mock.On("SubmitFeeBumpTransaction", transaction)}
}

func (_c *HorizonClient_SubmitFeeBumpTransaction_Call) Run(run func(transaction *txnbuild.FeeBumpTransaction)) *HorizonClient_SubmitFeeBumpTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*txnbuild.FeeBumpTransaction))
	})
	return _c
}

func (_c *HorizonClient_SubmitFeeBumpTransaction_Call) Return(_a0 horizon.Transaction, _a1 error) *HorizonClient_SubmitFeeBumpTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_SubmitFeeBumpTransaction_Call) RunAndReturn(run func(*txnbuild.FeeBumpTransaction) (horizon.Transaction, error)) *HorizonClient_SubmitFeeBumpTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// SubmitFeeBumpTransactionWithOptions provides a mock function with given fields: transaction, opts
func (_m *HorizonClient) SubmitFeeBumpTransactionWithOptions(transaction *txnbuild.FeeBumpTransaction, opts horizonclient.SubmitTxOpts) (horizon.Transaction, error) {
	ret := _m.Called(transaction, opts)

	if len(ret) == 0 {
		panic("no return value specified for SubmitFeeBumpTransactionWithOptions")
	}

	var r0 horizon.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*txnbuild.FeeBumpTransaction, horizonclient.SubmitTxOpts) (horizon.Transaction, error)); ok {
		return rf(transaction, opts)
	}
	if rf, ok := ret.Get(0).(func(*txnbuild.FeeBumpTransaction, horizonclient.SubmitTxOpts) horizon.Transaction); ok {
		r0 = rf(transaction, opts)
	} else {
		r0 = ret.Get(0).(horizon.Transaction)
	}

	if rf, ok := ret.Get(1).(func(*txnbuild.FeeBumpTransaction, horizonclient.SubmitTxOpts) error); ok {
		r1 = rf(transaction, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_SubmitFeeBumpTransactionWithOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitFeeBumpTransactionWithOptions'
type HorizonClient_SubmitFeeBumpTransactionWithOptions_Call struct {
	*mock.Call
}

// SubmitFeeBumpTransactionWithOptions is a helper method to define mock.On call
//   - transaction *txnbuild.FeeBumpTransaction
//   - opts horizonclient.SubmitTxOpts
func (_e *HorizonClient_Expecter) SubmitFeeBumpTransactionWithOptions(transaction interface{}, opts interface{}) *HorizonClient_SubmitFeeBumpTransactionWithOptions_Call {
	return &HorizonClient_SubmitFeeBumpTransactionWithOptions_Call{Call: _e.mock.On("SubmitFeeBumpTransactionWithOptions", transaction, opts)}
}

func (_c *HorizonClient_SubmitFeeBumpTransactionWithOptions_Call) Run(run func(transaction *txnbuild.FeeBumpTransaction, opts horizonclient.SubmitTxOpts)) *HorizonClient_SubmitFeeBumpTransactionWithOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*txnbuild.FeeBumpTransaction), args[1].(horizonclient.SubmitTxOpts))
	})
	return _c
}

func (_c *HorizonClient_SubmitFeeBumpTransactionWithOptions_Call) Return(_a0 horizon.Transaction, _a1 error) *HorizonClient_SubmitFeeBumpTransactionWithOptions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_SubmitFeeBumpTransactionWithOptions_Call) RunAndReturn(run func(*txnbuild.FeeBumpTransaction, horizonclient.SubmitTxOpts) (horizon.Transaction, error)) *HorizonClient_SubmitFeeBumpTransactionWithOptions_Call {
	_c.Call.Return(run)
	return _c
}

// SubmitTransaction provides a mock function with given fields: transaction
func (_m *HorizonClient) SubmitTransaction(transaction *txnbuild.Transaction) (horizon.Transaction, error) {
	ret := _m.Called(transaction)

	if len(ret) == 0 {
		panic("no return value specified for SubmitTransaction")
	}

	var r0 horizon.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*txnbuild.Transaction) (horizon.Transaction, error)); ok {
		return rf(transaction)
	}
	if rf, ok := ret.Get(0).(func(*txnbuild.Transaction) horizon.Transaction); ok {
		r0 = rf(transaction)
	} else {
		r0 = ret.Get(0).(horizon.Transaction)
	}

	if rf, ok := ret.Get(1).(func(*txnbuild.Transaction) error); ok {
		r1 = rf(transaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_SubmitTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitTransaction'
type HorizonClient_SubmitTransaction_Call struct {
	*mock.Call
}

// SubmitTransaction is a helper method to define mock.On call
//   - transaction *txnbuild.Transaction
func (_e *HorizonClient_Expecter) SubmitTransaction(transaction interface{}) *HorizonClient_SubmitTransaction_Call {
	return &HorizonClient_SubmitTransaction_Call{Call: _e.mock.On("SubmitTransaction", transaction)}
}

func (_c *HorizonClient_SubmitTransaction_Call) Run(run func(transaction *txnbuild.Transaction)) *HorizonClient_SubmitTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*txnbuild.Transaction))
	})
	return _c
}

func (_c *HorizonClient_SubmitTransaction_Call) Return(_a0 horizon.Transaction, _a1 error) *HorizonClient_SubmitTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_SubmitTransaction_Call) RunAndReturn(run func(*txnbuild.Transaction) (horizon.Transaction, error)) *HorizonClient_SubmitTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// SubmitTransactionWithOptions provides a mock function with given fields: transaction, opts
func (_m *HorizonClient) SubmitTransactionWithOptions(transaction *txnbuild.Transaction, opts horizonclient.SubmitTxOpts) (horizon.Transaction, error) {
	ret := _m.Called(transaction, opts)

	if len(ret) == 0 {
		panic("no return value specified for SubmitTransactionWithOptions")
	}

	var r0 horizon.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*txnbuild.Transaction, horizonclient.SubmitTxOpts) (horizon.Transaction, error)); ok {
		return rf(transaction, opts)
	}
	if rf, ok := ret.Get(0).(func(*txnbuild.Transaction, horizonclient.SubmitTxOpts) horizon.Transaction); ok {
		r0 = rf(transaction, opts)
	} else {
		r0 = ret.Get(0).(horizon.Transaction)
	}

	if rf, ok := ret.Get(1).(func(*txnbuild.Transaction, horizonclient.SubmitTxOpts) error); ok {
		r1 = rf(transaction, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_SubmitTransactionWithOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitTransactionWithOptions'
type HorizonClient_SubmitTransactionWithOptions_Call struct {
	*mock.Call
}

// SubmitTransactionWithOptions is a helper method to define mock.On call
//   - transaction *txnbuild.Transaction
//   - opts horizonclient.SubmitTxOpts
func (_e *HorizonClient_Expecter) SubmitTransactionWithOptions(transaction interface{}, opts interface{}) *HorizonClient_SubmitTransactionWithOptions_Call {
	return &HorizonClient_SubmitTransactionWithOptions_Call{Call: _e.mock.On("SubmitTransactionWithOptions", transaction, opts)}
}

func (_c *HorizonClient_SubmitTransactionWithOptions_Call) Run(run func(transaction *txnbuild.Transaction, opts horizonclient.SubmitTxOpts)) *HorizonClient_SubmitTransactionWithOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*txnbuild.Transaction), args[1].(horizonclient.SubmitTxOpts))
	})
	return _c
}

func (_c *HorizonClient_SubmitTransactionWithOptions_Call) Return(_a0 horizon.Transaction, _a1 error) *HorizonClient_SubmitTransactionWithOptions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_SubmitTransactionWithOptions_Call) RunAndReturn(run func(*txnbuild.Transaction, horizonclient.SubmitTxOpts) (horizon.Transaction, error)) *HorizonClient_SubmitTransactionWithOptions_Call {
	_c.Call.Return(run)
	return _c
}

// SubmitTransactionXDR provides a mock function with given fields: transactionXdr
func (_m *HorizonClient) SubmitTransactionXDR(transactionXdr string) (horizon.Transaction, error) {
	ret := _m.Called(transactionXdr)

	if len(ret) == 0 {
		panic("no return value specified for SubmitTransactionXDR")
	}

	var r0 horizon.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (horizon.Transaction, error)); ok {
		return rf(transactionXdr)
	}
	if rf, ok := ret.Get(0).(func(string) horizon.Transaction); ok {
		r0 = rf(transactionXdr)
	} else {
		r0 = ret.Get(0).(horizon.Transaction)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(transactionXdr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_SubmitTransactionXDR_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitTransactionXDR'
type HorizonClient_SubmitTransactionXDR_Call struct {
	*mock.Call
}

// SubmitTransactionXDR is a helper method to define mock.On call
//   - transactionXdr string
func (_e *HorizonClient_Expecter) SubmitTransactionXDR(transactionXdr interface{}) *HorizonClient_SubmitTransactionXDR_Call {
	return &HorizonClient_SubmitTransactionXDR_Call{Call: _e.mock.On("SubmitTransactionXDR", transactionXdr)}
}

func (_c *HorizonClient_SubmitTransactionXDR_Call) Run(run func(transactionXdr string)) *HorizonClient_SubmitTransactionXDR_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *HorizonClient_SubmitTransactionXDR_Call) Return(_a0 horizon.Transaction, _a1 error) *HorizonClient_SubmitTransactionXDR_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_SubmitTransactionXDR_Call) RunAndReturn(run func(string) (horizon.Transaction, error)) *HorizonClient_SubmitTransactionXDR_Call {
	_c.Call.Return(run)
	return _c
}

// TradeAggregations provides a mock function with given fields: request
func (_m *HorizonClient) TradeAggregations(request horizonclient.TradeAggregationRequest) (horizon.TradeAggregationsPage, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for TradeAggregations")
	}

	var r0 horizon.TradeAggregationsPage
	var r1 error
	if rf, ok := ret.Get(0).(func(horizonclient.TradeAggregationRequest) (horizon.TradeAggregationsPage, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(horizonclient.TradeAggregationRequest) horizon.TradeAggregationsPage); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(horizon.TradeAggregationsPage)
	}

	if rf, ok := ret.Get(1).(func(horizonclient.TradeAggregationRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_TradeAggregations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TradeAggregations'
type HorizonClient_TradeAggregations_Call struct {
	*mock.Call
}

// TradeAggregations is a helper method to define mock.On call
//   - request horizonclient.TradeAggregationRequest
func (_e *HorizonClient_Expecter) TradeAggregations(request interface{}) *HorizonClient_TradeAggregations_Call {
	return &HorizonClient_TradeAggregations_Call{Call: _e.mock.On("TradeAggregations", request)}
}

func (_c *HorizonClient_TradeAggregations_Call) Run(run func(request horizonclient.TradeAggregationRequest)) *HorizonClient_TradeAggregations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(horizonclient.TradeAggregationRequest))
	})
	return _c
}

func (_c *HorizonClient_TradeAggregations_Call) Return(_a0 horizon.TradeAggregationsPage, _a1 error) *HorizonClient_TradeAggregations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_TradeAggregations_Call) RunAndReturn(run func(horizonclient.TradeAggregationRequest) (horizon.TradeAggregationsPage, error)) *HorizonClient_TradeAggregations_Call {
	_c.Call.Return(run)
	return _c
}

// Trades provides a mock function with given fields: request
func (_m *HorizonClient) Trades(request horizonclient.TradeRequest) (horizon.TradesPage, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Trades")
	}

	var r0 horizon.TradesPage
	var r1 error
	if rf, ok := ret.Get(0).(func(horizonclient.TradeRequest) (horizon.TradesPage, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(horizonclient.TradeRequest) horizon.TradesPage); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(horizon.TradesPage)
	}

	if rf, ok := ret.Get(1).(func(horizonclient.TradeRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_Trades_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Trades'
type HorizonClient_Trades_Call struct {
	*mock.Call
}

// Trades is a helper method to define mock.On call
//   - request horizonclient.TradeRequest
func (_e *HorizonClient_Expecter) Trades(request interface{}) *HorizonClient_Trades_Call {
	return &HorizonClient_Trades_Call{Call: _e.mock.On("Trades", request)}
}

func (_c *HorizonClient_Trades_Call) Run(run func(request horizonclient.TradeRequest)) *HorizonClient_Trades_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(horizonclient.TradeRequest))
	})
	return _c
}

func (_c *HorizonClient_Trades_Call) Return(_a0 horizon.TradesPage, _a1 error) *HorizonClient_Trades_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_Trades_Call) RunAndReturn(run func(horizonclient.TradeRequest) (horizon.TradesPage, error)) *HorizonClient_Trades_Call {
	_c.Call.Return(run)
	return _c
}

// TransactionDetail provides a mock function with given fields: txHash
func (_m *HorizonClient) TransactionDetail(txHash string) (horizon.Transaction, error) {
	ret := _m.Called(txHash)

	if len(ret) == 0 {
		panic("no return value specified for TransactionDetail")
	}

	var r0 horizon.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (horizon.Transaction, error)); ok {
		return rf(txHash)
	}
	if rf, ok := ret.Get(0).(func(string) horizon.Transaction); ok {
		r0 = rf(txHash)
	} else {
		r0 = ret.Get(0).(horizon.Transaction)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(txHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_TransactionDetail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransactionDetail'
type HorizonClient_TransactionDetail_Call struct {
	*mock.Call
}

// TransactionDetail is a helper method to define mock.On call
//   - txHash string
func (_e *HorizonClient_Expecter) TransactionDetail(txHash interface{}) *HorizonClient_TransactionDetail_Call {
	return &HorizonClient_TransactionDetail_Call{Call: _e.mock.On("TransactionDetail", txHash)}
}

func (_c *HorizonClient_TransactionDetail_Call) Run(run func(txHash string)) *HorizonClient_TransactionDetail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *HorizonClient_TransactionDetail_Call) Return(_a0 horizon.Transaction, _a1 error) *HorizonClient_TransactionDetail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_TransactionDetail_Call) RunAndReturn(run func(string) (horizon.Transaction, error)) *HorizonClient_TransactionDetail_Call {
	_c.Call.Return(run)
	return _c
}

// Transactions provides a mock function with given fields: request
func (_m *HorizonClient) Transactions(request horizonclient.TransactionRequest) (horizon.TransactionsPage, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Transactions")
	}

	var r0 horizon.TransactionsPage
	var r1 error
	if rf, ok := ret.Get(0).(func(horizonclient.TransactionRequest) (horizon.TransactionsPage, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(horizonclient.TransactionRequest) horizon.TransactionsPage); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(horizon.TransactionsPage)
	}

	if rf, ok := ret.Get(1).(func(horizonclient.TransactionRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HorizonClient_Transactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transactions'
type HorizonClient_Transactions_Call struct {
	*mock.Call
}

// Transactions is a helper method to define mock.On call
//   - request horizonclient.TransactionRequest
func (_e *HorizonClient_Expecter) Transactions(request interface{}) *HorizonClient_Transactions_Call {
	return &HorizonClient_Transactions_Call{Call: _e.mock.On("Transactions", request)}
}

func (_c *HorizonClient_Transactions_Call) Run(run func(request horizonclient.TransactionRequest)) *HorizonClient_Transactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(horizonclient.TransactionRequest))
	})
	return _c
}

func (_c *HorizonClient_Transactions_Call) Return(_a0 horizon.TransactionsPage, _a1 error) *HorizonClient_Transactions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HorizonClient_Transactions_Call) RunAndReturn(run func(horizonclient.TransactionRequest) (horizon.TransactionsPage, error)) *HorizonClient_Transactions_Call {
	_c.Call.Return(run)
	return _c
}

// NewHorizonClient creates a new instance of HorizonClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHorizonClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *HorizonClient {
	mock := &HorizonClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
