// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mlm "github.com/Montelibero/mlm"
	mock "github.com/stretchr/testify/mock"
)

// Distributor is an autogenerated mock type for the Distributor type
type Distributor struct {
	mock.Mock
}

type Distributor_Expecter struct {
	mock *mock.Mock
}

func (_m *Distributor) EXPECT() *Distributor_Expecter {
	return &Distributor_Expecter{mock: &_m.Mock}
}

// Distribute provides a mock function with given fields: ctx
func (_m *Distributor) Distribute(ctx context.Context) (*mlm.DistributeResult, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Distribute")
	}

	var r0 *mlm.DistributeResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*mlm.DistributeResult, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *mlm.DistributeResult); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mlm.DistributeResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Distributor_Distribute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Distribute'
type Distributor_Distribute_Call struct {
	*mock.Call
}

// Distribute is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Distributor_Expecter) Distribute(ctx interface{}) *Distributor_Distribute_Call {
	return &Distributor_Distribute_Call{Call: _e.mock.On("Distribute", ctx)}
}

func (_c *Distributor_Distribute_Call) Run(run func(ctx context.Context)) *Distributor_Distribute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Distributor_Distribute_Call) Return(_a0 *mlm.DistributeResult, _a1 error) *Distributor_Distribute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Distributor_Distribute_Call) RunAndReturn(run func(context.Context) (*mlm.DistributeResult, error)) *Distributor_Distribute_Call {
	_c.Call.Return(run)
	return _c
}

// NewDistributor creates a new instance of Distributor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDistributor(t interface {
	mock.TestingT
	Cleanup(func())
}) *Distributor {
	mock := &Distributor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
